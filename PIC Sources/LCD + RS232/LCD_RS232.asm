;  ASM code generated by mikroVirtualMachine for PIC - V. 6.0.0.0
;  Date/Time: 08/03/2007 2.17.58
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2C33			GOTO	_main
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$00E3			MOVWF	?saveSTATUS
$0008	$0804			MOVF	FSR, 0
$0009	$00E2			MOVWF	?saveFSR
$000A	$080A			MOVF	PCLATH, 0
$000B	$00E4			MOVWF	?savePCLATH
$000C	$018A			CLRF	PCLATH
$000D	$0870			MOVF	STACK_0, 0
$000E	$1683			BSF	STATUS, RP0
$000F	$00AF			MOVWF	STSAVED_0
;LCD_RS232.c,45 :: 		void interrupt()
;LCD_RS232.c,47 :: 		ora.tck++;
$0010	$1283			BCF	STATUS, RP0
$0011	$0AA4			INCF	_ora+4, 1
$0012	$1903			BTFSC	STATUS, Z
$0013	$0AA5			INCF	_ora+5, 1
;LCD_RS232.c,48 :: 		TMR0 = TMR0_RESET;
$0014	$3083			MOVLW	131
$0015	$0081			MOVWF	TMR0
;LCD_RS232.c,50 :: 		if (ora.tck == TCK_SEC) {
$0016	$0825			MOVF	_ora+5, 0
$0017	$3A01			XORLW	1
$0018	$1D03			BTFSS	STATUS, Z
$0019	$281C			GOTO	L_interrupt_33
$001A	$3038			MOVLW	56
$001B	$0624			XORWF	_ora+4, 0
$001C	$	L_interrupt_33:
$001C	$1D03			BTFSS	STATUS, Z
$001D	$2838			GOTO	L_interrupt_5
;LCD_RS232.c,51 :: 		ora.tck = 0;
$001E	$01A4			CLRF	_ora+4
$001F	$01A5			CLRF	_ora+5
;LCD_RS232.c,52 :: 		ora.sec++;
$0020	$0AA2			INCF	_ora+2, 1
;LCD_RS232.c,53 :: 		if (ora.sec >= 60) {
$0021	$303C			MOVLW	60
$0022	$0222			SUBWF	_ora+2, 0
$0023	$1C03			BTFSS	STATUS, C
$0024	$2838			GOTO	L_interrupt_6
;LCD_RS232.c,54 :: 		ora.sec = 0;
$0025	$01A2			CLRF	_ora+2, 1
;LCD_RS232.c,55 :: 		ora.min++;
$0026	$0AA1			INCF	_ora+1, 1
;LCD_RS232.c,56 :: 		if (ora.min >= 60) {
$0027	$303C			MOVLW	60
$0028	$0221			SUBWF	_ora+1, 0
$0029	$1C03			BTFSS	STATUS, C
$002A	$2838			GOTO	L_interrupt_7
;LCD_RS232.c,57 :: 		ora.min=0;
$002B	$01A1			CLRF	_ora+1, 1
;LCD_RS232.c,58 :: 		ora.hr++;
$002C	$0AA0			INCF	_ora+0, 1
;LCD_RS232.c,59 :: 		if (ora.hr >= 24) {
$002D	$3018			MOVLW	24
$002E	$0220			SUBWF	_ora+0, 0
$002F	$1C03			BTFSS	STATUS, C
$0030	$2838			GOTO	L_interrupt_8
;LCD_RS232.c,60 :: 		ora.hr = 0;
$0031	$01A0			CLRF	_ora+0, 1
;LCD_RS232.c,61 :: 		ora.grn++;
$0032	$0AA3			INCF	_ora+3, 1
;LCD_RS232.c,62 :: 		if (ora.grn == 7) ora.grn = 0;
$0033	$0823			MOVF	_ora+3, 0
$0034	$3A07			XORLW	7
$0035	$1D03			BTFSS	STATUS, Z
$0036	$2838			GOTO	L_interrupt_9
$0037	$01A3			CLRF	_ora+3, 1
$0038	$	L_interrupt_9:
;LCD_RS232.c,63 :: 		}
$0038	$	L_interrupt_8:
;LCD_RS232.c,64 :: 		}
$0038	$	L_interrupt_7:
;LCD_RS232.c,65 :: 		}
$0038	$	L_interrupt_6:
;LCD_RS232.c,66 :: 		}
$0038	$	L_interrupt_5:
;LCD_RS232.c,67 :: 		INTCON = 0x20;
$0038	$3020			MOVLW	32
$0039	$008B			MOVWF	INTCON
;LCD_RS232.c,68 :: 		}
$003A	$	L_Interrupt_end:
$003A	$1683			BSF	STATUS, RP0
$003B	$082F			MOVF	STSAVED_0, 0
$003C	$00F0			MOVWF	STACK_0
$003D	$1283			BCF	STATUS, RP0
$003E	$0864			MOVF	?savePCLATH, 0
$003F	$008A			MOVWF	PCLATH
$0040	$0862			MOVF	?saveFSR, 0
$0041	$0084			MOVWF	FSR
$0042	$0E63			SWAPF	?saveSTATUS, 0
$0043	$0083			MOVWF	STATUS
$0044	$0EFF			SWAPF	STACK_15, 1
$0045	$0E7F			SWAPF	STACK_15, 0
$0046	$0009			RETFIE
$0047	$	_Delay_1us:
;delays.c,2 :: 		void Delay_1us() {
;delays.c,3 :: 		Delay_us(1);
$0047	$3001			MOVLW	1
$0048	$1303			BCF	STATUS, RP1
$0049	$1283			BCF	STATUS, RP0
$004A	$00FA			MOVWF	STACK_10
$004B	$0BFA			DECFSZ	STACK_10, F
$004C	$284B			GOTO	$-1
$004D	$0000			NOP
;delays.c,4 :: 		}
$004E	$0008			RETURN
$004F	$	_Delay_5500us:
;delays.c,26 :: 		void Delay_5500us() {
;delays.c,27 :: 		Delay_us(5500);
$004F	$3024			MOVLW	36
$0050	$1303			BCF	STATUS, RP1
$0051	$1283			BCF	STATUS, RP0
$0052	$00FB			MOVWF	STACK_11
$0053	$30FF			MOVLW	255
$0054	$00FA			MOVWF	STACK_10
$0055	$0BFB			DECFSZ	STACK_11, F
$0056	$2858			GOTO	$+2
$0057	$285B			GOTO	$+4
$0058	$0BFA			DECFSZ	STACK_10, F
$0059	$2858			GOTO	$-1
$005A	$2855			GOTO	$-5
$005B	$309E			MOVLW	158
$005C	$00FA			MOVWF	STACK_10
$005D	$0BFA			DECFSZ	STACK_10, F
$005E	$285D			GOTO	$-1
;delays.c,28 :: 		}
$005F	$0008			RETURN
$0060	$	_Delay_50us:
;delays.c,14 :: 		void Delay_50us() {
;delays.c,15 :: 		Delay_us(50);
$0060	$3053			MOVLW	83
$0061	$1303			BCF	STATUS, RP1
$0062	$1283			BCF	STATUS, RP0
$0063	$00FA			MOVWF	STACK_10
$0064	$0BFA			DECFSZ	STACK_10, F
$0065	$2864			GOTO	$-1
;delays.c,16 :: 		}
$0066	$0008			RETURN
$0067	$	_Lcd_Cmd:
$0067	$1303			BCF	STATUS, RP1
$0068	$1283			BCF	STATUS, RP0
$0069	$0826			MOVF	LCD_port_address, 0
$006A	$0084			MOVWF	FSR
$006B	$1683			BSF	STATUS, RP0
$006C	$082E			MOVF	FARG_Lcd_Cmd+0, 0
$006D	$1903			BTFSC	STATUS, Z
$006E	$286F			GOTO	L_Lcd_Cmd_0
$006F	$	L_Lcd_Cmd_0:
$006F	$1180			BCF	INDF, ___ENABLE
$0070	$1380			BCF	INDF, ___DB7
$0071	$1300			BCF	INDF, ___DB6
$0072	$1280			BCF	INDF, ___DB5
$0073	$1200			BCF	INDF, ___DB4
$0074	$1100			BCF	INDF, ___RS
$0075	$1BAE			BTFSC	FARG_Lcd_Cmd+0, 7
$0076	$1780			BSF	INDF, ___DB7
$0077	$1B2E			BTFSC	FARG_Lcd_Cmd+0, 6
$0078	$1700			BSF	INDF, ___DB6
$0079	$1AAE			BTFSC	FARG_Lcd_Cmd+0, 5
$007A	$1680			BSF	INDF, ___DB5
$007B	$1A2E			BTFSC	FARG_Lcd_Cmd+0, 4
$007C	$1600			BSF	INDF, ___DB4
$007D	$1283			BCF	STATUS, RP0
$007E	$0827			MOVF	LCD_cmd_status, 0
$007F	$1903			BTFSC	STATUS, Z
$0080	$2883			GOTO	L_Lcd_Cmd_1
$0081	$1100			BCF	INDF, ___RS
$0082	$2884			GOTO	L_Lcd_Cmd_2
$0083	$	L_Lcd_Cmd_1:
$0083	$1500			BSF	INDF, ___RS
$0084	$	L_Lcd_Cmd_2:
$0084	$1580			BSF	INDF, ___ENABLE
$0085	$2047			CALL	_Delay_1us
$0086	$1683			BSF	STATUS, RP0
$0087	$082E			MOVF	FARG_Lcd_Cmd+0, 0
$0088	$1903			BTFSC	STATUS, Z
$0089	$288A			GOTO	L_Lcd_Cmd_3
$008A	$	L_Lcd_Cmd_3:
$008A	$1180			BCF	INDF, ___ENABLE
$008B	$1380			BCF	INDF, ___DB7
$008C	$1300			BCF	INDF, ___DB6
$008D	$1280			BCF	INDF, ___DB5
$008E	$1200			BCF	INDF, ___DB4
$008F	$1100			BCF	INDF, ___RS
$0090	$19AE			BTFSC	FARG_Lcd_Cmd+0, 3
$0091	$1780			BSF	INDF, ___DB7
$0092	$192E			BTFSC	FARG_Lcd_Cmd+0, 2
$0093	$1700			BSF	INDF, ___DB6
$0094	$18AE			BTFSC	FARG_Lcd_Cmd+0, 1
$0095	$1680			BSF	INDF, ___DB5
$0096	$182E			BTFSC	FARG_Lcd_Cmd+0, 0
$0097	$1600			BSF	INDF, ___DB4
$0098	$1283			BCF	STATUS, RP0
$0099	$0827			MOVF	LCD_cmd_status, 0
$009A	$1903			BTFSC	STATUS, Z
$009B	$289E			GOTO	L_Lcd_Cmd_4
$009C	$1100			BCF	INDF, ___RS
$009D	$289F			GOTO	L_Lcd_Cmd_5
$009E	$	L_Lcd_Cmd_4:
$009E	$1500			BSF	INDF, ___RS
$009F	$	L_Lcd_Cmd_5:
$009F	$1580			BSF	INDF, ___ENABLE
$00A0	$2047			CALL	_Delay_1us
$00A1	$1180			BCF	INDF, ___ENABLE
$00A2	$0827			MOVF	LCD_cmd_status, 0
$00A3	$1903			BTFSC	STATUS, Z
$00A4	$28A7			GOTO	L_Lcd_Cmd_6
$00A5	$204F			CALL	_Delay_5500us
$00A6	$28A8			GOTO	L_Lcd_Cmd_7
$00A7	$	L_Lcd_Cmd_6:
$00A7	$2060			CALL	_Delay_50us
$00A8	$	L_Lcd_Cmd_7:
$00A8	$0008			RETURN
$00A9	$	_Div_16x16_S_L:
$00A9	$1303			BCF	STATUS, RP1
$00AA	$1283			BCF	STATUS, RP0
$00AB	$0D71			RLF	STACK_1, W
$00AC	$0DF8			RLF	STACK_8, F
$00AD	$0DF9			RLF	STACK_9, F
$00AE	$0874			MOVF	STACK_4, W
$00AF	$02F8			SUBWF	STACK_8, F
$00B0	$0875			MOVF	STACK_5, W
$00B1	$1C03			BTFSS	STATUS, C
$00B2	$0F75			INCFSZ	STACK_5, W
$00B3	$02F9			SUBWF	STACK_9, F
$00B4	$0DF0			RLF	STACK_0, F
$00B5	$0DF1			RLF	STACK_1, F
$00B6	$300F			MOVLW	15
$00B7	$00FC			MOVWF	STACK_12
$00B8	$0D71			RLF	STACK_1, W
$00B9	$0DF8			RLF	STACK_8, F
$00BA	$0DF9			RLF	STACK_9, F
$00BB	$0874			MOVF	STACK_4, W
$00BC	$1C70			BTFSS	STACK_0, 0
$00BD	$28C4			GOTO	$+7
$00BE	$02F8			SUBWF	STACK_8, F
$00BF	$0875			MOVF	STACK_5, W
$00C0	$1C03			BTFSS	STATUS, C
$00C1	$0F75			INCFSZ	STACK_5, W
$00C2	$02F9			SUBWF	STACK_9, F
$00C3	$28C9			GOTO	$+6
$00C4	$07F8			ADDWF	STACK_8, F
$00C5	$0875			MOVF	STACK_5, W
$00C6	$1803			BTFSC	STATUS, C
$00C7	$0F75			INCFSZ	STACK_5, W
$00C8	$07F9			ADDWF	STACK_9, F
$00C9	$0DF0			RLF	STACK_0, F
$00CA	$0DF1			RLF	STACK_1, F
$00CB	$0BFC			DECFSZ	STACK_12, F
$00CC	$28B8			GOTO	$-20
$00CD	$1870			BTFSC	STACK_0, 0
$00CE	$28D5			GOTO	$+7
$00CF	$0874			MOVF	STACK_4, W
$00D0	$07F8			ADDWF	STACK_8, F
$00D1	$0875			MOVF	STACK_5, W
$00D2	$1803			BTFSC	STATUS, C
$00D3	$0F75			INCFSZ	STACK_5, W
$00D4	$07F9			ADDWF	STACK_9, F
$00D5	$0000			NOP
$00D6	$0008			RETURN
$00D7	$	_____DoICP:
$00D7	$1303			BCF	STATUS, RP1
$00D8	$1283			BCF	STATUS, RP0
$00D9	$0829			MOVF	___DoICPHiAddr, 0
$00DA	$008A			MOVWF	PCLATH
$00DB	$082A			MOVF	___DoICPLoAddr, 0
$00DC	$0082			MOVWF	PCL
$00DD	$0008			RETURN
$00DE	$	_Lcd_Chr_CP:
$00DE	$1303			BCF	STATUS, RP1
$00DF	$1283			BCF	STATUS, RP0
$00E0	$01A7			CLRF	LCD_cmd_status, 1
$00E1	$086F			MOVF	FARG_Lcd_Chr_CP+0, 0
$00E2	$1683			BSF	STATUS, RP0
$00E3	$00AE			MOVWF	FARG_Lcd_Cmd+0
$00E4	$2067			CALL	_Lcd_Cmd
$00E5	$3001			MOVLW	1
$00E6	$00A7			MOVWF	LCD_cmd_status
$00E7	$0008			RETURN
$00E8	$	_Div_8x8_U:
$00E8	$1303			BCF	STATUS, RP1
$00E9	$1283			BCF	STATUS, RP0
$00EA	$01F8			CLRF	STACK_8, F
$00EB	$3008			MOVLW	8
$00EC	$00FC			MOVWF	STACK_12
$00ED	$0D70			RLF	STACK_0, W
$00EE	$0DF8			RLF	STACK_8, F
$00EF	$0874			MOVF	STACK_4, W
$00F0	$02F8			SUBWF	STACK_8, F
$00F1	$1803			BTFSC	STATUS, C
$00F2	$28F5			GOTO	$+3
$00F3	$07F8			ADDWF	STACK_8, F
$00F4	$1003			BCF	STATUS, C
$00F5	$0DF0			RLF	STACK_0, F
$00F6	$0BFC			DECFSZ	STACK_12, F
$00F7	$28ED			GOTO	$-10
$00F8	$0008			RETURN
$00F9	$	_Div_16x16_S:
$00F9	$1303			BCF	STATUS, RP1
$00FA	$1283			BCF	STATUS, RP0
$00FB	$01FD			CLRF	STACK_13
$00FC	$01F9			CLRF	STACK_9
$00FD	$01F8			CLRF	STACK_8
$00FE	$0871			MOVF	STACK_1, W
$00FF	$0470			IORWF	STACK_0, W
$0100	$1903			BTFSC	STATUS, Z
$0101	$3400			RETLW	0
$0102	$0871			MOVF	STACK_1, W
$0103	$0675			XORWF	STACK_5, W
$0104	$00FA			MOVWF	STACK_10
$0105	$1BFA			BTFSC	STACK_10, 7
$0106	$09FD			COMF	STACK_13, F
$0107	$01FB			CLRF	STACK_11
$0108	$1FF5			BTFSS	STACK_5, 7
$0109	$290F			GOTO	$+6
$010A	$09F4			COMF	STACK_4, F
$010B	$09F5			COMF	STACK_5, F
$010C	$0AF4			INCF	STACK_4, F
$010D	$1903			BTFSC	STATUS, Z
$010E	$0AF5			INCF	STACK_5, F
$010F	$1FF1			BTFSS	STACK_1, 7
$0110	$2916			GOTO	$+6
$0111	$09F0			COMF	STACK_0, F
$0112	$09F1			COMF	STACK_1, F
$0113	$0AF0			INCF	STACK_0, F
$0114	$1903			BTFSC	STATUS, Z
$0115	$0AF1			INCF	STACK_1, F
$0116	$0871			MOVF	STACK_1, W
$0117	$0475			IORWF	STACK_5, W
$0118	$00FA			MOVWF	STACK_10
$0119	$1BFA			BTFSC	STACK_10, 7
$011A	$292B			GOTO	$+17
$011B	$20A9			CALL	_Div_16x16_S_L
$011C	$187B			BTFSC	STACK_11, 0
$011D	$293E			GOTO	$+33
$011E	$1FFD			BTFSS	STACK_13, 7
$011F	$3400			RETLW	0
$0120	$09F0			COMF	STACK_0, F
$0121	$09F1			COMF	STACK_1, F
$0122	$0AF0			INCF	STACK_0, F
$0123	$1903			BTFSC	STATUS, Z
$0124	$0AF1			INCF	STACK_1, F
$0125	$09F8			COMF	STACK_8, F
$0126	$09F9			COMF	STACK_9, F
$0127	$0AF8			INCF	STACK_8, F
$0128	$1903			BTFSC	STATUS, Z
$0129	$0AF9			INCF	STACK_9, F
$012A	$3400			RETLW	0
$012B	$1FF5			BTFSS	STACK_5, 7
$012C	$293A			GOTO	$+14
$012D	$1BF1			BTFSC	STACK_1, 7
$012E	$2936			GOTO	$+8
$012F	$0871			MOVF	STACK_1, W
$0130	$00F9			MOVWF	STACK_9
$0131	$0870			MOVF	STACK_0, W
$0132	$00F8			MOVWF	STACK_8
$0133	$01F1			CLRF	STACK_1
$0134	$01F0			CLRF	STACK_0
$0135	$291E			GOTO	$-23
$0136	$01F1			CLRF	STACK_1
$0137	$01F0			CLRF	STACK_0
$0138	$0AF0			INCF	STACK_0, F
$0139	$3400			RETLW	0
$013A	$09F1			COMF	STACK_1, F
$013B	$09F0			COMF	STACK_0, F
$013C	$0AFB			INCF	STACK_11, F
$013D	$291B			GOTO	$-34
$013E	$0AF8			INCF	STACK_8, F
$013F	$1903			BTFSC	STATUS, Z
$0140	$0AF9			INCF	STACK_9, F
$0141	$0874			MOVF	STACK_4, W
$0142	$0278			SUBWF	STACK_8, W
$0143	$1D03			BTFSS	STATUS, Z
$0144	$291E			GOTO	$-38
$0145	$0875			MOVF	STACK_5, W
$0146	$0279			SUBWF	STACK_9, W
$0147	$1D03			BTFSS	STATUS, Z
$0148	$291E			GOTO	$-42
$0149	$01F9			CLRF	STACK_9
$014A	$01F8			CLRF	STACK_8
$014B	$0AF0			INCF	STACK_0, F
$014C	$1903			BTFSC	STATUS, Z
$014D	$0AF1			INCF	STACK_1, F
$014E	$1FF1			BTFSS	STACK_1, 7
$014F	$291E			GOTO	$-49
$0150	$0000			NOP
$0151	$34FF			RETLW	255
$0152	$0008			RETURN
$0153	$	_Usart_Write:
$0153	$	L_Usart_Write_3:
$0153	$3000			MOVLW	0
$0154	$1303			BCF	STATUS, RP1
$0155	$1683			BSF	STATUS, RP0
$0156	$1898			BTFSC	TXSTA, 1
$0157	$3001			MOVLW	1
$0158	$00F1			MOVWF	STACK_1
$0159	$0871			MOVF	STACK_1, 0
$015A	$3A00			XORLW	0
$015B	$1D03			BTFSS	STATUS, Z
$015C	$295F			GOTO	L_Usart_Write_4
$015D	$0000			NOP
$015E	$2953			GOTO	L_Usart_Write_3
$015F	$	L_Usart_Write_4:
$015F	$1283			BCF	STATUS, RP0
$0160	$086F			MOVF	FARG_Usart_Write+0, 0
$0161	$0099			MOVWF	TXREG
$0162	$0008			RETURN
$0163	$	_Lcd_Init:
$0163	$204F			CALL	_Delay_5500us
$0164	$204F			CALL	_Delay_5500us
$0165	$204F			CALL	_Delay_5500us
$0166	$0868			MOVF	FARG_Lcd_Init+0, 0
$0167	$00A6			MOVWF	LCD_port_address
$0168	$0868			MOVF	FARG_Lcd_Init+0, 0
$0169	$0084			MOVWF	FSR
$016A	$0180			CLRF	INDF, 1
$016B	$1784			BSF	FSR, 7
$016C	$0180			CLRF	INDF
$016D	$1384			BCF	FSR, 7
$016E	$1680			BSF	INDF, ___DB5
$016F	$1600			BSF	INDF, ___DB4
$0170	$1580			BSF	INDF, ___ENABLE
$0171	$1180			BCF	INDF, ___ENABLE
$0172	$204F			CALL	_Delay_5500us
$0173	$1580			BSF	INDF, ___ENABLE
$0174	$1180			BCF	INDF, ___ENABLE
$0175	$204F			CALL	_Delay_5500us
$0176	$1580			BSF	INDF, ___ENABLE
$0177	$1180			BCF	INDF, ___ENABLE
$0178	$204F			CALL	_Delay_5500us
$0179	$1680			BSF	INDF, ___DB5
$017A	$1200			BCF	INDF, ___DB4
$017B	$1580			BSF	INDF, ___ENABLE
$017C	$1180			BCF	INDF, ___ENABLE
$017D	$204F			CALL	_Delay_5500us
$017E	$0180			CLRF	INDF
$017F	$1680			BSF	INDF, ___DB5
$0180	$1580			BSF	INDF, ___ENABLE
$0181	$1180			BCF	INDF, ___ENABLE
$0182	$0180			CLRF	INDF
$0183	$1780			BSF	INDF, ___DB7
$0184	$1580			BSF	INDF, ___ENABLE
$0185	$1180			BCF	INDF, ___ENABLE
$0186	$204F			CALL	_Delay_5500us
$0187	$0180			CLRF	INDF
$0188	$1600			BSF	INDF, ___DB4
$0189	$1580			BSF	INDF, ___ENABLE
$018A	$1180			BCF	INDF, ___ENABLE
$018B	$0180			CLRF	INDF
$018C	$1580			BSF	INDF, ___ENABLE
$018D	$1180			BCF	INDF, ___ENABLE
$018E	$204F			CALL	_Delay_5500us
$018F	$0180			CLRF	INDF
$0190	$1580			BSF	INDF, ___ENABLE
$0191	$1180			BCF	INDF, ___ENABLE
$0192	$1600			BSF	INDF, ___DB4
$0193	$1580			BSF	INDF, ___ENABLE
$0194	$1180			BCF	INDF, ___ENABLE
$0195	$204F			CALL	_Delay_5500us
$0196	$0180			CLRF	INDF
$0197	$1580			BSF	INDF, ___ENABLE
$0198	$1180			BCF	INDF, ___ENABLE
$0199	$1600			BSF	INDF, ___DB4
$019A	$1680			BSF	INDF, ___DB5
$019B	$1700			BSF	INDF, ___DB6
$019C	$1780			BSF	INDF, ___DB7
$019D	$1580			BSF	INDF, ___ENABLE
$019E	$1180			BCF	INDF, ___ENABLE
$019F	$204F			CALL	_Delay_5500us
$01A0	$3001			MOVLW	1
$01A1	$00A7			MOVWF	LCD_cmd_status
$01A2	$0008			RETURN
$01A3	$	_strcp_c:
;LCD_RS232.c,23 :: 		void strcp_c(char *str1, const char *cstr2) {
;LCD_RS232.c,24 :: 		unsigned short i = 0;
$01A3	$1303			BCF	STATUS, RP1
$01A4	$1283			BCF	STATUS, RP0
$01A5	$01EB			CLRF	strcp_c_i_L0, 1
;LCD_RS232.c,26 :: 		do {
$01A6	$	L_strcp_c_0:
;LCD_RS232.c,27 :: 		str1[i] = cstr2[i];
$01A6	$086B			MOVF	strcp_c_i_L0, 0
$01A7	$0768			ADDWF	FARG_strcp_c+0, 0
$01A8	$00F2			MOVWF	STACK_2
$01A9	$086B			MOVF	strcp_c_i_L0, 0
$01AA	$0769			ADDWF	FARG_strcp_c+1, 0
$01AB	$00F0			MOVWF	STACK_0
$01AC	$086A			MOVF	FARG_strcp_c+2, 0
$01AD	$1803			BTFSC	STATUS, C
$01AE	$3F01			ADDLW	1
$01AF	$00F1			MOVWF	STACK_0+1
$01B0	$0870			MOVF	STACK_0, 0
$01B1	$00AA			MOVWF	___DoICPLoAddr
$01B2	$0871			MOVF	STACK_0+1, 0
$01B3	$00A9			MOVWF	___DoICPHiAddr
$01B4	$080A			MOVF	PCLATH, 0
$01B5	$00A8			MOVWF	___DoICPSavePCLATH
$01B6	$20D7			CALL	_____DoICP
$01B7	$00F0			MOVWF	STACK_0
$01B8	$0828			MOVF	___DoICPSavePCLATH, 0
$01B9	$008A			MOVWF	PCLATH
$01BA	$0872			MOVF	STACK_2, 0
$01BB	$0084			MOVWF	FSR
$01BC	$0870			MOVF	STACK_0, 0
$01BD	$0080			MOVWF	INDF
;LCD_RS232.c,28 :: 		} while (str1[i++]);
$01BE	$086B			MOVF	strcp_c_i_L0, 0
$01BF	$00F0			MOVWF	STACK_0
$01C0	$0AEB			INCF	strcp_c_i_L0, 1
$01C1	$0870			MOVF	STACK_0, 0
$01C2	$0768			ADDWF	FARG_strcp_c+0, 0
$01C3	$0084			MOVWF	FSR
$01C4	$0800			MOVF	INDF, 0
$01C5	$00F0			MOVWF	STACK_0
$01C6	$0870			MOVF	STACK_0, 0
$01C7	$1D03			BTFSS	STATUS, Z
$01C8	$29A6			GOTO	L_strcp_c_0
$01C9	$	L_strcp_c_1:
;LCD_RS232.c,29 :: 		}//~
$01C9	$0008			RETURN
$01CA	$	table___txt_Avvio1:
;LCD_RS232.c,4 :: 		const char txt_Avvio1[] = "CSTech";
$01CA	$3443			RETLW	67
$01CB	$3453			RETLW	83
$01CC	$3454			RETLW	84
$01CD	$3465			RETLW	101
$01CE	$3463			RETLW	99
$01CF	$3468			RETLW	104
$01D0	$3400			RETLW	0
$01D1	$0008			RETURN
$01D2	$	_LCD_Out:
$01D2	$1303			BCF	STATUS, RP1
$01D3	$1283			BCF	STATUS, RP0
$01D4	$0868			MOVF	FARG_LCD_Out+0, 0
$01D5	$1903			BTFSC	STATUS, Z
$01D6	$29D7			GOTO	L_LCD_Out_18
$01D7	$	L_LCD_Out_18:
$01D7	$29E7			GOTO	L_LCD_Out_19
$01D8	$	L_LCD_Out_21:
$01D8	$3080			MOVLW	128
$01D9	$00E8			MOVWF	FARG_LCD_Out+0
$01DA	$29F8			GOTO	L_LCD_Out_20
$01DB	$	L_LCD_Out_22:
$01DB	$30C0			MOVLW	192
$01DC	$00E8			MOVWF	FARG_LCD_Out+0
$01DD	$29F8			GOTO	L_LCD_Out_20
$01DE	$	L_LCD_Out_23:
$01DE	$3094			MOVLW	148
$01DF	$00E8			MOVWF	FARG_LCD_Out+0
$01E0	$29F8			GOTO	L_LCD_Out_20
$01E1	$	L_LCD_Out_24:
$01E1	$30D4			MOVLW	212
$01E2	$00E8			MOVWF	FARG_LCD_Out+0
$01E3	$29F8			GOTO	L_LCD_Out_20
$01E4	$	L_LCD_Out_25:
$01E4	$3080			MOVLW	128
$01E5	$00E8			MOVWF	FARG_LCD_Out+0
$01E6	$29F8			GOTO	L_LCD_Out_20
$01E7	$	L_LCD_Out_19:
$01E7	$0868			MOVF	FARG_LCD_Out+0, 0
$01E8	$3A01			XORLW	1
$01E9	$1903			BTFSC	STATUS, Z
$01EA	$29D8			GOTO	L_LCD_Out_21
$01EB	$0868			MOVF	FARG_LCD_Out+0, 0
$01EC	$3A02			XORLW	2
$01ED	$1903			BTFSC	STATUS, Z
$01EE	$29DB			GOTO	L_LCD_Out_22
$01EF	$0868			MOVF	FARG_LCD_Out+0, 0
$01F0	$3A03			XORLW	3
$01F1	$1903			BTFSC	STATUS, Z
$01F2	$29DE			GOTO	L_LCD_Out_23
$01F3	$0868			MOVF	FARG_LCD_Out+0, 0
$01F4	$3A04			XORLW	4
$01F5	$1903			BTFSC	STATUS, Z
$01F6	$29E1			GOTO	L_LCD_Out_24
$01F7	$29E4			GOTO	L_LCD_Out_25
$01F8	$	L_LCD_Out_20:
$01F8	$0369			DECF	FARG_LCD_Out+1, 0
$01F9	$00F0			MOVWF	STACK_0
$01FA	$0868			MOVF	FARG_LCD_Out+0, 0
$01FB	$07F0			ADDWF	STACK_0, 1
$01FC	$0870			MOVF	STACK_0, 0
$01FD	$00E8			MOVWF	FARG_LCD_Out+0
$01FE	$0870			MOVF	STACK_0, 0
$01FF	$1683			BSF	STATUS, RP0
$0200	$00AE			MOVWF	FARG_Lcd_Cmd+0
$0201	$2067			CALL	_Lcd_Cmd
$0202	$01A7			CLRF	LCD_cmd_status, 1
$0203	$01EB			CLRF	LCD_Out_i_L0, 1
$0204	$	L_LCD_Out_26:
$0204	$086B			MOVF	LCD_Out_i_L0, 0
$0205	$076A			ADDWF	FARG_LCD_Out+2, 0
$0206	$0084			MOVWF	FSR
$0207	$0800			MOVF	INDF, 0
$0208	$00F0			MOVWF	STACK_0
$0209	$0870			MOVF	STACK_0, 0
$020A	$1903			BTFSC	STATUS, Z
$020B	$2A14			GOTO	L_LCD_Out_27
$020C	$086B			MOVF	LCD_Out_i_L0, 0
$020D	$076A			ADDWF	FARG_LCD_Out+2, 0
$020E	$0084			MOVWF	FSR
$020F	$0800			MOVF	INDF, 0
$0210	$00EF			MOVWF	FARG_Lcd_Chr_CP+0
$0211	$20DE			CALL	_Lcd_Chr_CP
$0212	$0AEB			INCF	LCD_Out_i_L0, 1
$0213	$2A04			GOTO	L_LCD_Out_26
$0214	$	L_LCD_Out_27:
$0214	$3001			MOVLW	1
$0215	$00A7			MOVWF	LCD_cmd_status
$0216	$0008			RETURN
$0217	$	table___txt_Avvio2:
;LCD_RS232.c,5 :: 		const char txt_Avvio2[] = "Novembre 2006";
$0217	$344E			RETLW	78
$0218	$346F			RETLW	111
$0219	$3476			RETLW	118
$021A	$3465			RETLW	101
$021B	$346D			RETLW	109
$021C	$3462			RETLW	98
$021D	$3472			RETLW	114
$021E	$3465			RETLW	101
$021F	$3420			RETLW	32
$0220	$3432			RETLW	50
$0221	$3430			RETLW	48
$0222	$3430			RETLW	48
$0223	$3436			RETLW	54
$0224	$3400			RETLW	0
$0225	$0008			RETURN
$0226	$	_Usart_Init:
$0226	$1303			BCF	STATUS, RP1
$0227	$1683			BSF	STATUS, RP0
$0228	$1698			BSF	TXSTA, 5
$0229	$3090			MOVLW	144
$022A	$1283			BCF	STATUS, RP0
$022B	$0098			MOVWF	RCSTA
$022C	$1683			BSF	STATUS, RP0
$022D	$1787			BSF	TRISC, 7
$022E	$1307			BCF	TRISC, 6
$022F	$	L_Usart_Init_0:
$022F	$1283			BCF	STATUS, RP0
$0230	$1E8C			BTFSS	PIR1, 5
$0231	$2A35			GOTO	L_Usart_Init_1
$0232	$081A			MOVF	RCREG, 0
$0233	$00EC			MOVWF	Usart_Init_tmp_L0
$0234	$2A2F			GOTO	L_Usart_Init_0
$0235	$	L_Usart_Init_1:
$0235	$0008			RETURN
$0236	$	_ByteToStr:
$0236	$1303			BCF	STATUS, RP1
$0237	$1283			BCF	STATUS, RP0
$0238	$0869			MOVF	FARG_ByteToStr+1, 0
$0239	$0084			MOVWF	FSR
$023A	$3020			MOVLW	32
$023B	$0080			MOVWF	INDF
$023C	$3020			MOVLW	32
$023D	$0A84			INCF	FSR, F
$023E	$0080			MOVWF	INDF
$023F	$0A84			INCF	FSR, F
$0240	$0080			MOVWF	INDF
$0241	$3001			MOVLW	1
$0242	$00EA			MOVWF	ByteToStr_len_L0
$0243	$0868			MOVF	FARG_ByteToStr+0, 0
$0244	$3C09			SUBLW	9
$0245	$1803			BTFSC	STATUS, C
$0246	$2A48			GOTO	L_ByteToStr_0
$0247	$0AEA			INCF	ByteToStr_len_L0, 1
$0248	$	L_ByteToStr_0:
$0248	$0868			MOVF	FARG_ByteToStr+0, 0
$0249	$3C63			SUBLW	99
$024A	$1803			BTFSC	STATUS, C
$024B	$2A4D			GOTO	L_ByteToStr_1
$024C	$0AEA			INCF	ByteToStr_len_L0, 1
$024D	$	L_ByteToStr_1:
$024D	$3003			MOVLW	3
$024E	$0769			ADDWF	FARG_ByteToStr+1, 0
$024F	$00F0			MOVWF	STACK_0
$0250	$0870			MOVF	STACK_0, 0
$0251	$0084			MOVWF	FSR
$0252	$0180			CLRF	INDF, 1
$0253	$0384			DECF	FSR, 1
$0254	$	L_ByteToStr_2:
$0254	$086A			MOVF	ByteToStr_len_L0, 0
$0255	$3C00			SUBLW	0
$0256	$1803			BTFSC	STATUS, C
$0257	$2A72			GOTO	L_ByteToStr_3
$0258	$300A			MOVLW	10
$0259	$00F4			MOVWF	STACK_4
$025A	$0868			MOVF	FARG_ByteToStr+0, 0
$025B	$00F0			MOVWF	STACK_0
$025C	$20E8			CALL	_div_8x8_u
$025D	$0878			MOVF	STACK_8, 0
$025E	$00F0			MOVWF	STACK_0
$025F	$0870			MOVF	STACK_0, 0
$0260	$0080			MOVWF	INDF
$0261	$0800			MOVF	INDF, 0
$0262	$0268			SUBWF	FARG_ByteToStr+0, 0
$0263	$00F0			MOVWF	STACK_0
$0264	$01F1			CLRF	STACK_0+1
$0265	$1C03			BTFSS	STATUS, C
$0266	$03F1			DECF	STACK_0+1, 1
$0267	$300A			MOVLW	10
$0268	$00F4			MOVWF	STACK_4
$0269	$01F5			CLRF	STACK_4+1
$026A	$20F9			CALL	_div_16x16_s
$026B	$0870			MOVF	STACK_0, 0
$026C	$00E8			MOVWF	FARG_ByteToStr+0
$026D	$3030			MOVLW	48
$026E	$0780			ADDWF	INDF, 1
$026F	$0384			DECF	FSR, 1
$0270	$03EA			DECF	ByteToStr_len_L0, 1
$0271	$2A54			GOTO	L_ByteToStr_2
$0272	$	L_ByteToStr_3:
$0272	$0008			RETURN
$0273	$	_Usart_Write_Str:
;LCD_RS232.c,33 :: 		void Usart_Write_Str(char *str ,int len, int start)
;LCD_RS232.c,37 :: 		for (i=start; i<len; i++)
$0273	$1303			BCF	STATUS, RP1
$0274	$1283			BCF	STATUS, RP0
$0275	$086B			MOVF	FARG_Usart_Write_Str+3, 0
$0276	$00ED			MOVWF	Usart_Write_Str_i_L0
$0277	$086C			MOVF	FARG_Usart_Write_Str+4, 0
$0278	$00EE			MOVWF	Usart_Write_Str_i_L0+1
$0279	$	L_Usart_Write_Str_2:
$0279	$3080			MOVLW	128
$027A	$066E			XORWF	Usart_Write_Str_i_L0+1, 0
$027B	$00F0			MOVWF	STACK_0
$027C	$3080			MOVLW	128
$027D	$066A			XORWF	FARG_Usart_Write_Str+2, 0
$027E	$0270			SUBWF	STACK_0, 0
$027F	$1D03			BTFSS	STATUS, Z
$0280	$2A83			GOTO	L_Usart_Write_Str_32
$0281	$0869			MOVF	FARG_Usart_Write_Str+1, 0
$0282	$026D			SUBWF	Usart_Write_Str_i_L0, 0
$0283	$	L_Usart_Write_Str_32:
$0283	$1803			BTFSC	STATUS, C
$0284	$2A8F			GOTO	L_Usart_Write_Str_3
;LCD_RS232.c,39 :: 		Usart_Write(str[i]);
$0285	$086D			MOVF	Usart_Write_Str_i_L0, 0
$0286	$0768			ADDWF	FARG_Usart_Write_Str+0, 0
$0287	$0084			MOVWF	FSR
$0288	$0800			MOVF	INDF, 0
$0289	$00EF			MOVWF	FARG_Usart_Write+0
$028A	$2153			CALL	_Usart_Write
;LCD_RS232.c,40 :: 		}
$028B	$	L_Usart_Write_Str_4:
;LCD_RS232.c,37 :: 		for (i=start; i<len; i++)
$028B	$0AED			INCF	Usart_Write_Str_i_L0, 1
$028C	$1903			BTFSC	STATUS, Z
$028D	$0AEE			INCF	Usart_Write_Str_i_L0+1, 1
;LCD_RS232.c,40 :: 		}
$028E	$2A79			GOTO	L_Usart_Write_Str_2
$028F	$	L_Usart_Write_Str_3:
;LCD_RS232.c,42 :: 		}
$028F	$0008			RETURN
$0290	$	_Usart_Data_Ready:
$0290	$3000			MOVLW	0
$0291	$1303			BCF	STATUS, RP1
$0292	$1283			BCF	STATUS, RP0
$0293	$1A8C			BTFSC	PIR1, 5
$0294	$3001			MOVLW	1
$0295	$00F1			MOVWF	STACK_1
$0296	$0871			MOVF	STACK_1, 0
$0297	$00F0			MOVWF	STACK_0
$0298	$0008			RETURN
$0299	$	_Usart_Read:
$0299	$1303			BCF	STATUS, RP1
$029A	$1283			BCF	STATUS, RP0
$029B	$081A			MOVF	RCREG, 0
$029C	$00E8			MOVWF	Usart_Read_tmp_L0
$029D	$1C98			BTFSS	RCSTA, 1
$029E	$2AA1			GOTO	L_Usart_Read_2
$029F	$1218			BCF	RCSTA, 4
$02A0	$1618			BSF	RCSTA, 4
$02A1	$	L_Usart_Read_2:
$02A1	$0868			MOVF	Usart_Read_tmp_L0, 0
$02A2	$00F0			MOVWF	STACK_0
$02A3	$0008			RETURN
$02A4	$	_Init:
;LCD_RS232.c,71 :: 		void Init(void)
;LCD_RS232.c,74 :: 		PORTB = 0;
$02A4	$1303			BCF	STATUS, RP1
$02A5	$1283			BCF	STATUS, RP0
$02A6	$0186			CLRF	PORTB, 1
;LCD_RS232.c,75 :: 		TRISB = 0xFF;
$02A7	$30FF			MOVLW	255
$02A8	$1683			BSF	STATUS, RP0
$02A9	$0086			MOVWF	TRISB
;LCD_RS232.c,76 :: 		PORTC = 0;
$02AA	$1283			BCF	STATUS, RP0
$02AB	$0187			CLRF	PORTC, 1
;LCD_RS232.c,77 :: 		TRISC = 0x0F;
$02AC	$300F			MOVLW	15
$02AD	$1683			BSF	STATUS, RP0
$02AE	$0087			MOVWF	TRISC
;LCD_RS232.c,80 :: 		OPTION_REG  = 0x86;       // RBPU_N + PS2-PS0
$02AF	$3086			MOVLW	134
$02B0	$0081			MOVWF	OPTION_REG
;LCD_RS232.c,81 :: 		TMR0        = TMR0_RESET;
$02B1	$3083			MOVLW	131
$02B2	$1283			BCF	STATUS, RP0
$02B3	$0081			MOVWF	TMR0
;LCD_RS232.c,82 :: 		INTCON      = 0xA0;       // GIE + TMR0IE
$02B4	$30A0			MOVLW	160
$02B5	$008B			MOVWF	INTCON
;LCD_RS232.c,85 :: 		Lcd_Init(&PORTB);
$02B6	$3006			MOVLW	PORTB
$02B7	$00E8			MOVWF	FARG_Lcd_Init+0
$02B8	$2163			CALL	_Lcd_Init
;LCD_RS232.c,88 :: 		Usart_Init(9600);
$02B9	$3081			MOVLW	129
$02BA	$1683			BSF	STATUS, RP0
$02BB	$0099			MOVWF	SPBRG
$02BC	$1518			BSF	TXSTA, BRGH
$02BD	$2226			CALL	_Usart_Init
;LCD_RS232.c,91 :: 		ora.hr=0;
$02BE	$01A0			CLRF	_ora+0, 1
;LCD_RS232.c,92 :: 		ora.min=0;
$02BF	$01A1			CLRF	_ora+1, 1
;LCD_RS232.c,93 :: 		ora.sec=0;
$02C0	$01A2			CLRF	_ora+2, 1
;LCD_RS232.c,94 :: 		ora.tck=0;
$02C1	$01A4			CLRF	_ora+4
$02C2	$01A5			CLRF	_ora+5
;LCD_RS232.c,95 :: 		ora.grn=0;
$02C3	$01A3			CLRF	_ora+3, 1
;LCD_RS232.c,98 :: 		Lcd_Cmd(LCD_CLEAR);
$02C4	$3001			MOVLW	1
$02C5	$1683			BSF	STATUS, RP0
$02C6	$00AE			MOVWF	FARG_Lcd_Cmd+0
$02C7	$2067			CALL	_Lcd_Cmd
;LCD_RS232.c,99 :: 		Lcd_Cmd(LCD_CURSOR_OFF);
$02C8	$300C			MOVLW	12
$02C9	$1683			BSF	STATUS, RP0
$02CA	$00AE			MOVWF	FARG_Lcd_Cmd+0
$02CB	$2067			CALL	_Lcd_Cmd
;LCD_RS232.c,101 :: 		strcp_c(txt_msg, txt_Avvio1);
$02CC	$302B			MOVLW	_txt_msg
$02CD	$00E8			MOVWF	FARG_strcp_c+0
$02CE	$30CA			MOVLW	#_txt_Avvio1
$02CF	$00E9			MOVWF	FARG_strcp_c+1
$02D0	$3001			MOVLW	@#_txt_Avvio1
$02D1	$00EA			MOVWF	FARG_strcp_c+2
$02D2	$21A3			CALL	_strcp_c
;LCD_RS232.c,102 :: 		LCD_Out(1,1,txt_msg);
$02D3	$3001			MOVLW	1
$02D4	$00E8			MOVWF	FARG_LCD_Out+0
$02D5	$3001			MOVLW	1
$02D6	$00E9			MOVWF	FARG_LCD_Out+1
$02D7	$302B			MOVLW	_txt_msg
$02D8	$00EA			MOVWF	FARG_LCD_Out+2
$02D9	$21D2			CALL	_LCD_Out
;LCD_RS232.c,103 :: 		strcp_c(txt_msg, txt_Avvio2);
$02DA	$302B			MOVLW	_txt_msg
$02DB	$00E8			MOVWF	FARG_strcp_c+0
$02DC	$3017			MOVLW	#_txt_Avvio2
$02DD	$00E9			MOVWF	FARG_strcp_c+1
$02DE	$3002			MOVLW	@#_txt_Avvio2
$02DF	$00EA			MOVWF	FARG_strcp_c+2
$02E0	$21A3			CALL	_strcp_c
;LCD_RS232.c,104 :: 		LCD_Out(2,1,txt_msg);
$02E1	$3002			MOVLW	2
$02E2	$00E8			MOVWF	FARG_LCD_Out+0
$02E3	$3001			MOVLW	1
$02E4	$00E9			MOVWF	FARG_LCD_Out+1
$02E5	$302B			MOVLW	_txt_msg
$02E6	$00EA			MOVWF	FARG_LCD_Out+2
$02E7	$21D2			CALL	_LCD_Out
;LCD_RS232.c,106 :: 		Delay_ms(1000);
$02E8	$301A			MOVLW	26
$02E9	$00FC			MOVWF	STACK_12
$02EA	$30FF			MOVLW	255
$02EB	$00FB			MOVWF	STACK_11
$02EC	$30FF			MOVLW	255
$02ED	$00FA			MOVWF	STACK_10
$02EE	$0BFC			DECFSZ	STACK_12, F
$02EF	$2AF1			GOTO	$+2
$02F0	$2AF8			GOTO	$+8
$02F1	$0BFB			DECFSZ	STACK_11, F
$02F2	$2AF4			GOTO	$+2
$02F3	$2AF7			GOTO	$+4
$02F4	$0BFA			DECFSZ	STACK_10, F
$02F5	$2AF4			GOTO	$-1
$02F6	$2AF1			GOTO	$-5
$02F7	$2AEE			GOTO	$-9
$02F8	$307F			MOVLW	127
$02F9	$00FB			MOVWF	STACK_11
$02FA	$30FF			MOVLW	255
$02FB	$00FA			MOVWF	STACK_10
$02FC	$0BFB			DECFSZ	STACK_11, F
$02FD	$2AFF			GOTO	$+2
$02FE	$2B02			GOTO	$+4
$02FF	$0BFA			DECFSZ	STACK_10, F
$0300	$2AFF			GOTO	$-1
$0301	$2AFC			GOTO	$-5
$0302	$3059			MOVLW	89
$0303	$00FA			MOVWF	STACK_10
$0304	$0BFA			DECFSZ	STACK_10, F
$0305	$2B04			GOTO	$-1
$0306	$0000			NOP
$0307	$0000			NOP
;LCD_RS232.c,107 :: 		Lcd_Cmd(Lcd_CLEAR);       // Clear display
$0308	$3001			MOVLW	1
$0309	$1683			BSF	STATUS, RP0
$030A	$00AE			MOVWF	FARG_Lcd_Cmd+0
$030B	$2067			CALL	_Lcd_Cmd
;LCD_RS232.c,109 :: 		}
$030C	$0008			RETURN
$030D	$	_Display_Ora:
;LCD_RS232.c,111 :: 		void Display_Ora () {
;LCD_RS232.c,115 :: 		ByteToStr(ora.hr,thr);
$030D	$1303			BCF	STATUS, RP1
$030E	$1283			BCF	STATUS, RP0
$030F	$0820			MOVF	_ora+0, 0
$0310	$00E8			MOVWF	FARG_ByteToStr+0
$0311	$30A0			MOVLW	Display_Ora_thr_L0
$0312	$00E9			MOVWF	FARG_ByteToStr+1
$0313	$2236			CALL	_ByteToStr
;LCD_RS232.c,116 :: 		ByteToStr(ora.min,tmin);
$0314	$0821			MOVF	_ora+1, 0
$0315	$00E8			MOVWF	FARG_ByteToStr+0
$0316	$30A5			MOVLW	Display_Ora_tmin_L0
$0317	$00E9			MOVWF	FARG_ByteToStr+1
$0318	$2236			CALL	_ByteToStr
;LCD_RS232.c,117 :: 		ByteToStr(ora.sec,tsec);
$0319	$0822			MOVF	_ora+2, 0
$031A	$00E8			MOVWF	FARG_ByteToStr+0
$031B	$30AA			MOVLW	Display_Ora_tsec_L0
$031C	$00E9			MOVWF	FARG_ByteToStr+1
$031D	$2236			CALL	_ByteToStr
;LCD_RS232.c,119 :: 		if (thr[1]==' ') thr[1]='0';
$031E	$1683			BSF	STATUS, RP0
$031F	$0821			MOVF	Display_Ora_thr_L0+1, 0
$0320	$3A20			XORLW	32
$0321	$1D03			BTFSS	STATUS, Z
$0322	$2B25			GOTO	L_Display_Ora_10
$0323	$3030			MOVLW	48
$0324	$00A1			MOVWF	Display_Ora_thr_L0+1
$0325	$	L_Display_Ora_10:
;LCD_RS232.c,120 :: 		if (tmin[1]==' ') tmin[1]='0';
$0325	$0826			MOVF	Display_Ora_tmin_L0+1, 0
$0326	$3A20			XORLW	32
$0327	$1D03			BTFSS	STATUS, Z
$0328	$2B2B			GOTO	L_Display_Ora_11
$0329	$3030			MOVLW	48
$032A	$00A6			MOVWF	Display_Ora_tmin_L0+1
$032B	$	L_Display_Ora_11:
;LCD_RS232.c,121 :: 		if (tsec[1]==' ') tsec[1]='0';
$032B	$082B			MOVF	Display_Ora_tsec_L0+1, 0
$032C	$3A20			XORLW	32
$032D	$1D03			BTFSS	STATUS, Z
$032E	$2B31			GOTO	L_Display_Ora_12
$032F	$3030			MOVLW	48
$0330	$00AB			MOVWF	Display_Ora_tsec_L0+1
$0331	$	L_Display_Ora_12:
;LCD_RS232.c,125 :: 		LCD_Out(1,1,nomegrn[ora.grn]);
$0331	$3001			MOVLW	1
$0332	$1283			BCF	STATUS, RP0
$0333	$00E8			MOVWF	FARG_LCD_Out+0
$0334	$3001			MOVLW	1
$0335	$00E9			MOVWF	FARG_LCD_Out+1
$0336	$0823			MOVF	_ora+3, 0
$0337	$3F3A			ADDLW	_nomegrn
$0338	$0084			MOVWF	FSR
$0339	$0800			MOVF	INDF, 0
$033A	$00EA			MOVWF	FARG_LCD_Out+2
$033B	$21D2			CALL	_LCD_Out
;LCD_RS232.c,126 :: 		LCD_Out(1,5,(thr+1));
$033C	$3001			MOVLW	1
$033D	$00E8			MOVWF	FARG_LCD_Out+0
$033E	$3005			MOVLW	5
$033F	$00E9			MOVWF	FARG_LCD_Out+1
$0340	$30A1			MOVLW	Display_Ora_thr_L0+1
$0341	$00EA			MOVWF	FARG_LCD_Out+2
$0342	$21D2			CALL	_LCD_Out
;LCD_RS232.c,127 :: 		Lcd_Chr_CP(':');
$0343	$303A			MOVLW	58
$0344	$00EF			MOVWF	FARG_Lcd_Chr_CP+0
$0345	$20DE			CALL	_Lcd_Chr_CP
;LCD_RS232.c,128 :: 		LCD_Out(1,8,(tmin+1));
$0346	$3001			MOVLW	1
$0347	$00E8			MOVWF	FARG_LCD_Out+0
$0348	$3008			MOVLW	8
$0349	$00E9			MOVWF	FARG_LCD_Out+1
$034A	$30A6			MOVLW	Display_Ora_tmin_L0+1
$034B	$00EA			MOVWF	FARG_LCD_Out+2
$034C	$21D2			CALL	_LCD_Out
;LCD_RS232.c,129 :: 		Lcd_Chr_CP(':');
$034D	$303A			MOVLW	58
$034E	$00EF			MOVWF	FARG_Lcd_Chr_CP+0
$034F	$20DE			CALL	_Lcd_Chr_CP
;LCD_RS232.c,130 :: 		LCD_Out(1,11,(tsec+1));
$0350	$3001			MOVLW	1
$0351	$00E8			MOVWF	FARG_LCD_Out+0
$0352	$300B			MOVLW	11
$0353	$00E9			MOVWF	FARG_LCD_Out+1
$0354	$30AB			MOVLW	Display_Ora_tsec_L0+1
$0355	$00EA			MOVWF	FARG_LCD_Out+2
$0356	$21D2			CALL	_LCD_Out
;LCD_RS232.c,132 :: 		LCD_Cmd(LCD_CURSOR_OFF);
$0357	$300C			MOVLW	12
$0358	$1683			BSF	STATUS, RP0
$0359	$00AE			MOVWF	FARG_Lcd_Cmd+0
$035A	$2067			CALL	_Lcd_Cmd
;LCD_RS232.c,133 :: 		}
$035B	$0008			RETURN
$035C	$	_GestioneSeriale:
;LCD_RS232.c,135 :: 		void GestioneSeriale(char cmd)
;LCD_RS232.c,141 :: 		switch (cmd) {
$035C	$2BDD			GOTO	L_GestioneSeriale_13
;LCD_RS232.c,142 :: 		case 49: // Richiesta l'ora (Tasto 1)
$035D	$	L_GestioneSeriale_15:
;LCD_RS232.c,144 :: 		ByteToStr(ora.hr,thr);
$035D	$1303			BCF	STATUS, RP1
$035E	$1283			BCF	STATUS, RP0
$035F	$0820			MOVF	_ora+0, 0
$0360	$00E8			MOVWF	FARG_ByteToStr+0
$0361	$30A0			MOVLW	GestioneSeriale_thr_L0
$0362	$00E9			MOVWF	FARG_ByteToStr+1
$0363	$2236			CALL	_ByteToStr
;LCD_RS232.c,145 :: 		ByteToStr(ora.min,tmin);
$0364	$0821			MOVF	_ora+1, 0
$0365	$00E8			MOVWF	FARG_ByteToStr+0
$0366	$30A5			MOVLW	GestioneSeriale_tmin_L0
$0367	$00E9			MOVWF	FARG_ByteToStr+1
$0368	$2236			CALL	_ByteToStr
;LCD_RS232.c,146 :: 		ByteToStr(ora.sec,tsec);
$0369	$0822			MOVF	_ora+2, 0
$036A	$00E8			MOVWF	FARG_ByteToStr+0
$036B	$30AA			MOVLW	GestioneSeriale_tsec_L0
$036C	$00E9			MOVWF	FARG_ByteToStr+1
$036D	$2236			CALL	_ByteToStr
;LCD_RS232.c,148 :: 		if (thr[1]==' ') thr[1]='0';
$036E	$1683			BSF	STATUS, RP0
$036F	$0821			MOVF	GestioneSeriale_thr_L0+1, 0
$0370	$3A20			XORLW	32
$0371	$1D03			BTFSS	STATUS, Z
$0372	$2B75			GOTO	L_GestioneSeriale_16
$0373	$3030			MOVLW	48
$0374	$00A1			MOVWF	GestioneSeriale_thr_L0+1
$0375	$	L_GestioneSeriale_16:
;LCD_RS232.c,149 :: 		if (tmin[1]==' ') tmin[1]='0';
$0375	$0826			MOVF	GestioneSeriale_tmin_L0+1, 0
$0376	$3A20			XORLW	32
$0377	$1D03			BTFSS	STATUS, Z
$0378	$2B7B			GOTO	L_GestioneSeriale_17
$0379	$3030			MOVLW	48
$037A	$00A6			MOVWF	GestioneSeriale_tmin_L0+1
$037B	$	L_GestioneSeriale_17:
;LCD_RS232.c,150 :: 		if (tsec[1]==' ') tsec[1]='0';
$037B	$082B			MOVF	GestioneSeriale_tsec_L0+1, 0
$037C	$3A20			XORLW	32
$037D	$1D03			BTFSS	STATUS, Z
$037E	$2B81			GOTO	L_GestioneSeriale_18
$037F	$3030			MOVLW	48
$0380	$00AB			MOVWF	GestioneSeriale_tsec_L0+1
$0381	$	L_GestioneSeriale_18:
;LCD_RS232.c,152 :: 		Usart_Write_Str(nomegrn[ora.grn],3,0);
$0381	$1283			BCF	STATUS, RP0
$0382	$0823			MOVF	_ora+3, 0
$0383	$3F3A			ADDLW	_nomegrn
$0384	$0084			MOVWF	FSR
$0385	$0800			MOVF	INDF, 0
$0386	$00E8			MOVWF	FARG_Usart_Write_Str+0
$0387	$3003			MOVLW	3
$0388	$00E9			MOVWF	FARG_Usart_Write_Str+1
$0389	$3000			MOVLW	0
$038A	$00EA			MOVWF	FARG_Usart_Write_Str+2
$038B	$01EB			CLRF	FARG_Usart_Write_Str+3
$038C	$01EC			CLRF	FARG_Usart_Write_Str+4
$038D	$2273			CALL	_Usart_Write_Str
;LCD_RS232.c,153 :: 		Usart_Write_Str(thr,3,1);
$038E	$30A0			MOVLW	GestioneSeriale_thr_L0
$038F	$00E8			MOVWF	FARG_Usart_Write_Str+0
$0390	$3003			MOVLW	3
$0391	$00E9			MOVWF	FARG_Usart_Write_Str+1
$0392	$3000			MOVLW	0
$0393	$00EA			MOVWF	FARG_Usart_Write_Str+2
$0394	$3001			MOVLW	1
$0395	$00EB			MOVWF	FARG_Usart_Write_Str+3
$0396	$3000			MOVLW	0
$0397	$00EC			MOVWF	FARG_Usart_Write_Str+4
$0398	$2273			CALL	_Usart_Write_Str
;LCD_RS232.c,154 :: 		Usart_Write(':');
$0399	$303A			MOVLW	58
$039A	$00EF			MOVWF	FARG_Usart_Write+0
$039B	$2153			CALL	_Usart_Write
;LCD_RS232.c,155 :: 		Usart_Write_Str(tmin,3,1);
$039C	$30A5			MOVLW	GestioneSeriale_tmin_L0
$039D	$00E8			MOVWF	FARG_Usart_Write_Str+0
$039E	$3003			MOVLW	3
$039F	$00E9			MOVWF	FARG_Usart_Write_Str+1
$03A0	$3000			MOVLW	0
$03A1	$00EA			MOVWF	FARG_Usart_Write_Str+2
$03A2	$3001			MOVLW	1
$03A3	$00EB			MOVWF	FARG_Usart_Write_Str+3
$03A4	$3000			MOVLW	0
$03A5	$00EC			MOVWF	FARG_Usart_Write_Str+4
$03A6	$2273			CALL	_Usart_Write_Str
;LCD_RS232.c,156 :: 		Usart_Write(':');
$03A7	$303A			MOVLW	58
$03A8	$00EF			MOVWF	FARG_Usart_Write+0
$03A9	$2153			CALL	_Usart_Write
;LCD_RS232.c,157 :: 		Usart_Write_Str(tsec,3,1);
$03AA	$30AA			MOVLW	GestioneSeriale_tsec_L0
$03AB	$00E8			MOVWF	FARG_Usart_Write_Str+0
$03AC	$3003			MOVLW	3
$03AD	$00E9			MOVWF	FARG_Usart_Write_Str+1
$03AE	$3000			MOVLW	0
$03AF	$00EA			MOVWF	FARG_Usart_Write_Str+2
$03B0	$3001			MOVLW	1
$03B1	$00EB			MOVWF	FARG_Usart_Write_Str+3
$03B2	$3000			MOVLW	0
$03B3	$00EC			MOVWF	FARG_Usart_Write_Str+4
$03B4	$2273			CALL	_Usart_Write_Str
;LCD_RS232.c,158 :: 		break;
$03B5	$2BE7			GOTO	L_GestioneSeriale_14
;LCD_RS232.c,160 :: 		case 2: // Prepararsi ad un aggiornamento ora
$03B6	$	L_GestioneSeriale_19:
;LCD_RS232.c,163 :: 		while (!Usart_Data_Ready()) { asm nop; }
$03B6	$	L_GestioneSeriale_20:
$03B6	$2290			CALL	_Usart_Data_Ready
$03B7	$0870			MOVF	STACK_0, 0
$03B8	$1D03			BTFSS	STATUS, Z
$03B9	$2BBC			GOTO	L_GestioneSeriale_21
$03BA	$0000			NOP
$03BB	$2BB6			GOTO	L_GestioneSeriale_20
$03BC	$	L_GestioneSeriale_21:
;LCD_RS232.c,164 :: 		ora.grn = Usart_Read();
$03BC	$2299			CALL	_Usart_Read
$03BD	$0870			MOVF	STACK_0, 0
$03BE	$00A3			MOVWF	_ora+3
;LCD_RS232.c,165 :: 		while (!Usart_Data_Ready()) { asm nop; }
$03BF	$	L_GestioneSeriale_22:
$03BF	$2290			CALL	_Usart_Data_Ready
$03C0	$0870			MOVF	STACK_0, 0
$03C1	$1D03			BTFSS	STATUS, Z
$03C2	$2BC5			GOTO	L_GestioneSeriale_23
$03C3	$0000			NOP
$03C4	$2BBF			GOTO	L_GestioneSeriale_22
$03C5	$	L_GestioneSeriale_23:
;LCD_RS232.c,166 :: 		ora.hr  = Usart_Read();
$03C5	$2299			CALL	_Usart_Read
$03C6	$0870			MOVF	STACK_0, 0
$03C7	$00A0			MOVWF	_ora+0
;LCD_RS232.c,167 :: 		while (!Usart_Data_Ready()) { asm nop; }
$03C8	$	L_GestioneSeriale_24:
$03C8	$2290			CALL	_Usart_Data_Ready
$03C9	$0870			MOVF	STACK_0, 0
$03CA	$1D03			BTFSS	STATUS, Z
$03CB	$2BCE			GOTO	L_GestioneSeriale_25
$03CC	$0000			NOP
$03CD	$2BC8			GOTO	L_GestioneSeriale_24
$03CE	$	L_GestioneSeriale_25:
;LCD_RS232.c,168 :: 		ora.min = Usart_Read();
$03CE	$2299			CALL	_Usart_Read
$03CF	$0870			MOVF	STACK_0, 0
$03D0	$00A1			MOVWF	_ora+1
;LCD_RS232.c,169 :: 		while (!Usart_Data_Ready()) { asm nop; }
$03D1	$	L_GestioneSeriale_26:
$03D1	$2290			CALL	_Usart_Data_Ready
$03D2	$0870			MOVF	STACK_0, 0
$03D3	$1D03			BTFSS	STATUS, Z
$03D4	$2BD7			GOTO	L_GestioneSeriale_27
$03D5	$0000			NOP
$03D6	$2BD1			GOTO	L_GestioneSeriale_26
$03D7	$	L_GestioneSeriale_27:
;LCD_RS232.c,170 :: 		ora.sec = Usart_Read();
$03D7	$2299			CALL	_Usart_Read
$03D8	$0870			MOVF	STACK_0, 0
$03D9	$00A2			MOVWF	_ora+2
;LCD_RS232.c,172 :: 		ora.tck = 0;
$03DA	$01A4			CLRF	_ora+4
$03DB	$01A5			CLRF	_ora+5
;LCD_RS232.c,173 :: 		break;
$03DC	$2BE7			GOTO	L_GestioneSeriale_14
;LCD_RS232.c,174 :: 		}
$03DD	$	L_GestioneSeriale_13:
$03DD	$1303			BCF	STATUS, RP1
$03DE	$1283			BCF	STATUS, RP0
$03DF	$0867			MOVF	FARG_GestioneSeriale+0, 0
$03E0	$3A31			XORLW	49
$03E1	$1903			BTFSC	STATUS, Z
$03E2	$2B5D			GOTO	L_GestioneSeriale_15
$03E3	$0867			MOVF	FARG_GestioneSeriale+0, 0
$03E4	$3A02			XORLW	2
$03E5	$1903			BTFSC	STATUS, Z
$03E6	$2BB6			GOTO	L_GestioneSeriale_19
$03E7	$	L_GestioneSeriale_14:
;LCD_RS232.c,175 :: 		}
$03E7	$0008			RETURN
$03E8	$	GlobalIniLCD_RS232:
$03E8	$304C			MOVLW	76
$03E9	$1303			BCF	STATUS, RP1
$03EA	$1283			BCF	STATUS, RP0
$03EB	$00C2			MOVWF	lstr1_LCD_RS232+0
$03EC	$3075			MOVLW	117
$03ED	$00C3			MOVWF	lstr1_LCD_RS232+1
$03EE	$306E			MOVLW	110
$03EF	$00C4			MOVWF	lstr1_LCD_RS232+2
$03F0	$01C5			CLRF	lstr1_LCD_RS232+3
$03F1	$304D			MOVLW	77
$03F2	$00C6			MOVWF	lstr2_LCD_RS232+0
$03F3	$3061			MOVLW	97
$03F4	$00C7			MOVWF	lstr2_LCD_RS232+1
$03F5	$3072			MOVLW	114
$03F6	$00C8			MOVWF	lstr2_LCD_RS232+2
$03F7	$01C9			CLRF	lstr2_LCD_RS232+3
$03F8	$304D			MOVLW	77
$03F9	$00CA			MOVWF	lstr3_LCD_RS232+0
$03FA	$3065			MOVLW	101
$03FB	$00CB			MOVWF	lstr3_LCD_RS232+1
$03FC	$3072			MOVLW	114
$03FD	$00CC			MOVWF	lstr3_LCD_RS232+2
$03FE	$01CD			CLRF	lstr3_LCD_RS232+3
$03FF	$3047			MOVLW	71
$0400	$00CE			MOVWF	lstr4_LCD_RS232+0
$0401	$3069			MOVLW	105
$0402	$00CF			MOVWF	lstr4_LCD_RS232+1
$0403	$306F			MOVLW	111
$0404	$00D0			MOVWF	lstr4_LCD_RS232+2
$0405	$01D1			CLRF	lstr4_LCD_RS232+3
$0406	$3056			MOVLW	86
$0407	$00D2			MOVWF	lstr5_LCD_RS232+0
$0408	$3065			MOVLW	101
$0409	$00D3			MOVWF	lstr5_LCD_RS232+1
$040A	$306E			MOVLW	110
$040B	$00D4			MOVWF	lstr5_LCD_RS232+2
$040C	$01D5			CLRF	lstr5_LCD_RS232+3
$040D	$3053			MOVLW	83
$040E	$00D6			MOVWF	lstr6_LCD_RS232+0
$040F	$3061			MOVLW	97
$0410	$00D7			MOVWF	lstr6_LCD_RS232+1
$0411	$3062			MOVLW	98
$0412	$00D8			MOVWF	lstr6_LCD_RS232+2
$0413	$01D9			CLRF	lstr6_LCD_RS232+3
$0414	$3044			MOVLW	68
$0415	$00DA			MOVWF	lstr7_LCD_RS232+0
$0416	$306F			MOVLW	111
$0417	$00DB			MOVWF	lstr7_LCD_RS232+1
$0418	$306D			MOVLW	109
$0419	$00DC			MOVWF	lstr7_LCD_RS232+2
$041A	$01DD			CLRF	lstr7_LCD_RS232+3
$041B	$302D			MOVLW	45
$041C	$00DE			MOVWF	lstr8_LCD_RS232+0
$041D	$302D			MOVLW	45
$041E	$00DF			MOVWF	lstr8_LCD_RS232+1
$041F	$302D			MOVLW	45
$0420	$00E0			MOVWF	lstr8_LCD_RS232+2
$0421	$01E1			CLRF	lstr8_LCD_RS232+3
$0422	$3042			MOVLW	lstr1_LCD_RS232
$0423	$00BA			MOVWF	_nomegrn+0
$0424	$3046			MOVLW	lstr2_LCD_RS232
$0425	$00BB			MOVWF	_nomegrn+1
$0426	$304A			MOVLW	lstr3_LCD_RS232
$0427	$00BC			MOVWF	_nomegrn+2
$0428	$304E			MOVLW	lstr4_LCD_RS232
$0429	$00BD			MOVWF	_nomegrn+3
$042A	$3052			MOVLW	lstr5_LCD_RS232
$042B	$00BE			MOVWF	_nomegrn+4
$042C	$3056			MOVLW	lstr6_LCD_RS232
$042D	$00BF			MOVWF	_nomegrn+5
$042E	$305A			MOVLW	lstr7_LCD_RS232
$042F	$00C0			MOVWF	_nomegrn+6
$0430	$305E			MOVLW	lstr8_LCD_RS232
$0431	$00C1			MOVWF	_nomegrn+7
;LCD_RS232.c,203 :: 		}
$0432	$0008			RETURN
$0433	$	_main:
$0433	$23E8			CALL	GlobalIniLCD_RS232
;LCD_RS232.c,184 :: 		void main() {
;LCD_RS232.c,187 :: 		Init();
$0434	$22A4			CALL	_Init
;LCD_RS232.c,189 :: 		Display_Ora();
$0435	$230D			CALL	_Display_Ora
;LCD_RS232.c,191 :: 		do {
$0436	$	L_main_28:
;LCD_RS232.c,193 :: 		if (ora.tck == TCK_SEC-1)
$0436	$0825			MOVF	_ora+5, 0
$0437	$3A01			XORLW	1
$0438	$1D03			BTFSS	STATUS, Z
$0439	$2C3C			GOTO	L_main_34
$043A	$3037			MOVLW	55
$043B	$0624			XORWF	_ora+4, 0
$043C	$	L_main_34:
$043C	$1D03			BTFSS	STATUS, Z
$043D	$2C3F			GOTO	L_main_30
;LCD_RS232.c,194 :: 		Display_Ora();
$043E	$230D			CALL	_Display_Ora
$043F	$	L_main_30:
;LCD_RS232.c,196 :: 		if (Usart_Data_Ready()) {
$043F	$2290			CALL	_Usart_Data_Ready
$0440	$0870			MOVF	STACK_0, 0
$0441	$1903			BTFSC	STATUS, Z
$0442	$2C4A			GOTO	L_main_31
;LCD_RS232.c,197 :: 		i = Usart_Read();
$0443	$2299			CALL	_Usart_Read
$0444	$0870			MOVF	STACK_0, 0
$0445	$00E5			MOVWF	main_i_L0
$0446	$01E6			CLRF	main_i_L0+1
;LCD_RS232.c,199 :: 		GestioneSeriale(i);
$0447	$0865			MOVF	main_i_L0, 0
$0448	$00E7			MOVWF	FARG_GestioneSeriale+0
$0449	$235C			CALL	_GestioneSeriale
;LCD_RS232.c,200 :: 		}
$044A	$	L_main_31:
;LCD_RS232.c,202 :: 		} while (1);
$044A	$2C36			GOTO	L_main_28
;LCD_RS232.c,203 :: 		}
$044B	$2C4B			GOTO	$
