;  ASM code generated by mikroVirtualMachine for PIC - V. 6.2.1.0
;  Date/Time: 11/10/2007 23.19.40
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$299D			GOTO	_main
$0004	$	_Mul_32x32_U:
$0004	$1303			BCF	STATUS, RP1
$0005	$1283			BCF	STATUS, RP0
$0006	$3022			MOVLW	34
$0007	$00FC			MOVWF	STACK_12
$0008	$01F8			CLRF	STACK_8
$0009	$01F9			CLRF	STACK_9
$000A	$01FA			CLRF	STACK_10
$000B	$01FB			CLRF	STACK_11
$000C	$	_NEXT:
$000C	$03FC			DECF	STACK_12, F
$000D	$1903			BTFSC	STATUS, Z
$000E	$283A			GOTO	_EXIT2
$000F	$1003			BCF	STATUS, C
$0010	$	_LOOP:
$0010	$0CFB			RRF	STACK_11, F
$0011	$0CFA			RRF	STACK_10, F
$0012	$0CF9			RRF	STACK_9, F
$0013	$0CF8			RRF	STACK_8, F
$0014	$0CF3			RRF	STACK_3, F
$0015	$0CF2			RRF	STACK_2, F
$0016	$0CF1			RRF	STACK_1, F
$0017	$0CF0			RRF	STACK_0, F
$0018	$1C03			BTFSS	STATUS, C
$0019	$280C			GOTO	_NEXT
$001A	$03FC			DECF	STACK_12, F
$001B	$1903			BTFSC	STATUS, Z
$001C	$282C			GOTO	_EXIT1
$001D	$0874			MOVF	STACK_4, W
$001E	$07F8			ADDWF	STACK_8, F
$001F	$0875			MOVF	STACK_5, W
$0020	$1803			BTFSC	STATUS, C
$0021	$0F75			INCFSZ	STACK_5, W
$0022	$07F9			ADDWF	STACK_9, F
$0023	$0876			MOVF	STACK_6, W
$0024	$1803			BTFSC	STATUS, C
$0025	$0F76			INCFSZ	STACK_6, W
$0026	$07FA			ADDWF	STACK_10, F
$0027	$0877			MOVF	STACK_7, W
$0028	$1803			BTFSC	STATUS, C
$0029	$0F77			INCFSZ	STACK_7, W
$002A	$07FB			ADDWF	STACK_11, F
$002B	$2810			GOTO	_LOOP
$002C	$	_EXIT1:
$002C	$0874			MOVF	STACK_4, W
$002D	$07F8			ADDWF	STACK_8, F
$002E	$0875			MOVF	STACK_5, W
$002F	$1803			BTFSC	STATUS, C
$0030	$0F75			INCFSZ	STACK_5, W
$0031	$07F9			ADDWF	STACK_9, F
$0032	$0876			MOVF	STACK_6, W
$0033	$1803			BTFSC	STATUS, C
$0034	$0F76			INCFSZ	STACK_6, W
$0035	$07FA			ADDWF	STACK_10, F
$0036	$0877			MOVF	STACK_7, W
$0037	$1803			BTFSC	STATUS, C
$0038	$0F77			INCFSZ	STACK_7, W
$0039	$07FB			ADDWF	STACK_11, F
$003A	$	_EXIT2:
$003A	$0008			RETURN
$003B	$	_Delay_22us:
;delays.c,10 :: 		void Delay_22us() {
;delays.c,11 :: 		Delay_us(22);
$003B	$3024			MOVLW	36
$003C	$1303			BCF	STATUS, RP1
$003D	$1283			BCF	STATUS, RP0
$003E	$00FA			MOVWF	STACK_10
$003F	$0BFA			DECFSZ	STACK_10, F
$0040	$283F			GOTO	$-1
$0041	$0000			NOP
;delays.c,12 :: 		}
$0042	$0008			RETURN
$0043	$	_VDelay_ms:
;delays.c,82 :: 		void VDelay_ms(unsigned Time_ms){
;delays.c,84 :: 		NumberOfCyc = Clock_KHz()>>2; // this will be done by compiler, no asm will be genereated except that for assignment;
$0043	$3088			MOVLW	136
$0044	$1303			BCF	STATUS, RP1
$0045	$1283			BCF	STATUS, RP0
$0046	$00AA			MOVWF	VDelay_ms_NumberOfCyc_L0
$0047	$3013			MOVLW	19
$0048	$00AB			MOVWF	VDelay_ms_NumberOfCyc_L0+1
$0049	$01AC			CLRF	VDelay_ms_NumberOfCyc_L0+2
$004A	$01AD			CLRF	VDelay_ms_NumberOfCyc_L0+3
;delays.c,85 :: 		NumberOfCyc =  NumberOfCyc >> 5; // Dec and While below take around 32 instructions
$004B	$3005			MOVLW	5
$004C	$00F4			MOVWF	STACK_4
$004D	$082A			MOVF	VDelay_ms_NumberOfCyc_L0, 0
$004E	$00F0			MOVWF	STACK_0
$004F	$082B			MOVF	VDelay_ms_NumberOfCyc_L0+1, 0
$0050	$00F1			MOVWF	STACK_0+1
$0051	$082C			MOVF	VDelay_ms_NumberOfCyc_L0+2, 0
$0052	$00F2			MOVWF	STACK_0+2
$0053	$082D			MOVF	VDelay_ms_NumberOfCyc_L0+3, 0
$0054	$00F3			MOVWF	STACK_0+3
$0055	$0874			MOVF	STACK_4, 0
$0056	$	L_VDelay_ms_6:
$0056	$1903			BTFSC	STATUS, Z
$0057	$285F			GOTO	L_VDelay_ms_7
$0058	$0CF3			RRF	STACK_0+3, 1
$0059	$0CF2			RRF	STACK_0+2, 1
$005A	$0CF1			RRF	STACK_0+1, 1
$005B	$0CF0			RRF	STACK_0, 1
$005C	$13F3			BCF	STACK_0+3, 7
$005D	$3FFF			ADDLW	255
$005E	$2856			GOTO	L_VDelay_ms_6
$005F	$	L_VDelay_ms_7:
$005F	$0870			MOVF	STACK_0, 0
$0060	$00AA			MOVWF	VDelay_ms_NumberOfCyc_L0
$0061	$0871			MOVF	STACK_0+1, 0
$0062	$00AB			MOVWF	VDelay_ms_NumberOfCyc_L0+1
$0063	$0872			MOVF	STACK_0+2, 0
$0064	$00AC			MOVWF	VDelay_ms_NumberOfCyc_L0+2
$0065	$0873			MOVF	STACK_0+3, 0
$0066	$00AD			MOVWF	VDelay_ms_NumberOfCyc_L0+3
;delays.c,86 :: 		NumberOfCyc =  NumberOfCyc *  Time_ms;
$0067	$0828			MOVF	FARG_VDelay_ms+0, 0
$0068	$00F4			MOVWF	STACK_4
$0069	$0829			MOVF	FARG_VDelay_ms+1, 0
$006A	$00F5			MOVWF	STACK_4+1
$006B	$01F6			CLRF	STACK_4+2
$006C	$01F7			CLRF	STACK_4+3
$006D	$2004			CALL	_mul_32x32_u
$006E	$0870			MOVF	STACK_0, 0
$006F	$00AA			MOVWF	VDelay_ms_NumberOfCyc_L0
$0070	$0871			MOVF	STACK_0+1, 0
$0071	$00AB			MOVWF	VDelay_ms_NumberOfCyc_L0+1
$0072	$0872			MOVF	STACK_0+2, 0
$0073	$00AC			MOVWF	VDelay_ms_NumberOfCyc_L0+2
$0074	$0873			MOVF	STACK_0+3, 0
$0075	$00AD			MOVWF	VDelay_ms_NumberOfCyc_L0+3
;delays.c,87 :: 		while (NumberOfCyc)
$0076	$	L_VDelay_ms_4:
$0076	$082A			MOVF	VDelay_ms_NumberOfCyc_L0, 0
$0077	$042B			IORWF	VDelay_ms_NumberOfCyc_L0+1, 0
$0078	$042C			IORWF	VDelay_ms_NumberOfCyc_L0+2, 0
$0079	$042D			IORWF	VDelay_ms_NumberOfCyc_L0+3, 0
$007A	$1903			BTFSC	STATUS, Z
$007B	$2888			GOTO	L_VDelay_ms_5
;delays.c,89 :: 		--NumberOfCyc;
$007C	$3001			MOVLW	1
$007D	$02AA			SUBWF	VDelay_ms_NumberOfCyc_L0, 1
$007E	$1C03			BTFSS	STATUS, C
$007F	$02AB			SUBWF	VDelay_ms_NumberOfCyc_L0+1, 1
$0080	$1C03			BTFSS	STATUS, C
$0081	$02AC			SUBWF	VDelay_ms_NumberOfCyc_L0+2, 1
$0082	$1C03			BTFSS	STATUS, C
$0083	$02AD			SUBWF	VDelay_ms_NumberOfCyc_L0+3, 1
;delays.c,90 :: 		asm nop;
$0084	$0000			NOP
;delays.c,91 :: 		asm nop;
$0085	$0000			NOP
;delays.c,92 :: 		asm nop;
$0086	$0000			NOP
;delays.c,93 :: 		}
$0087	$2876			GOTO	L_VDelay_ms_4
$0088	$	L_VDelay_ms_5:
;delays.c,94 :: 		}
$0088	$0008			RETURN
$0089	$	_Div_16x16_U:
$0089	$1303			BCF	STATUS, RP1
$008A	$1283			BCF	STATUS, RP0
$008B	$01F8			CLRF	STACK_8
$008C	$01F9			CLRF	STACK_9
$008D	$3010			MOVLW	16
$008E	$00FC			MOVWF	STACK_12
$008F	$0D71			RLF	STACK_1, W
$0090	$0DF8			RLF	STACK_8, F
$0091	$0DF9			RLF	STACK_9, F
$0092	$0874			MOVF	STACK_4, W
$0093	$02F8			SUBWF	STACK_8, F
$0094	$0875			MOVF	STACK_5, W
$0095	$1C03			BTFSS	STATUS, C
$0096	$0F75			INCFSZ	STACK_5, W
$0097	$02F9			SUBWF	STACK_9, F
$0098	$1803			BTFSC	STATUS, C
$0099	$28A1			GOTO	$+8
$009A	$0874			MOVF	STACK_4, W
$009B	$07F8			ADDWF	STACK_8, F
$009C	$0875			MOVF	STACK_5, W
$009D	$1803			BTFSC	STATUS, C
$009E	$0F75			INCFSZ	STACK_5, W
$009F	$07F9			ADDWF	STACK_9, F
$00A0	$1003			BCF	STATUS, C
$00A1	$0DF0			RLF	STACK_0, F
$00A2	$0DF1			RLF	STACK_1, F
$00A3	$0BFC			DECFSZ	STACK_12, F
$00A4	$288F			GOTO	$-21
$00A5	$0008			RETURN
$00A6	$	_Adc_Read:
$00A6	$1303			BCF	STATUS, RP1
$00A7	$1283			BCF	STATUS, RP0
$00A8	$019F			CLRF	ADCON0, 1
$00A9	$30C0			MOVLW	192
$00AA	$049F			IORWF	ADCON0, 1
$00AB	$1683			BSF	STATUS, RP0
$00AC	$171F			BSF	ADCON1, 6
$00AD	$179F			BSF	ADCON1, 7
$00AE	$1283			BCF	STATUS, RP0
$00AF	$0824			MOVF	FARG_Adc_Read+0, 0
$00B0	$00F0			MOVWF	STACK_0
$00B1	$0DF0			RLF	STACK_0, 1
$00B2	$1070			BCF	STACK_0, 0
$00B3	$0DF0			RLF	STACK_0, 1
$00B4	$1070			BCF	STACK_0, 0
$00B5	$0DF0			RLF	STACK_0, 1
$00B6	$1070			BCF	STACK_0, 0
$00B7	$0870			MOVF	STACK_0, 0
$00B8	$049F			IORWF	ADCON0, 1
$00B9	$141F			BSF	ADCON0, 0
$00BA	$203B			CALL	_Delay_22us
$00BB	$151F			BSF	ADCON0, 2
$00BC	$	L_Adc_Read_0:
$00BC	$1D1F			BTFSS	ADCON0, 2
$00BD	$28C0			GOTO	L_Adc_Read_1
$00BE	$0000			NOP
$00BF	$28BC			GOTO	L_Adc_Read_0
$00C0	$	L_Adc_Read_1:
$00C0	$101F			BCF	ADCON0, 0
$00C1	$3008			MOVLW	8
$00C2	$00F2			MOVWF	STACK_2
$00C3	$081E			MOVF	ADRESH, 0
$00C4	$00F0			MOVWF	STACK_0
$00C5	$01F1			CLRF	STACK_0+1
$00C6	$0872			MOVF	STACK_2, 0
$00C7	$	L_Adc_Read_2:
$00C7	$1903			BTFSC	STATUS, Z
$00C8	$28CE			GOTO	L_Adc_Read_3
$00C9	$0DF0			RLF	STACK_0, 1
$00CA	$0DF1			RLF	STACK_0+1, 1
$00CB	$1070			BCF	STACK_0, 0
$00CC	$3FFF			ADDLW	255
$00CD	$28C7			GOTO	L_Adc_Read_2
$00CE	$	L_Adc_Read_3:
$00CE	$1683			BSF	STATUS, RP0
$00CF	$081E			MOVF	ADRESL, 0
$00D0	$04F0			IORWF	STACK_0, 1
$00D1	$3000			MOVLW	0
$00D2	$04F1			IORWF	STACK_0+1, 1
$00D3	$0008			RETURN
$00D4	$	_make_delay:
;test.c,5 :: 		void make_delay(unsigned int delay){
;test.c,8 :: 		if (delay < 100)
$00D4	$3000			MOVLW	0
$00D5	$1303			BCF	STATUS, RP1
$00D6	$1283			BCF	STATUS, RP0
$00D7	$0225			SUBWF	FARG_make_delay+1, 0
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28DC			GOTO	L_make_delay_43
$00DA	$3064			MOVLW	100
$00DB	$0224			SUBWF	FARG_make_delay+0, 0
$00DC	$	L_make_delay_43:
$00DC	$1803			BTFSC	STATUS, C
$00DD	$28EB			GOTO	L_make_delay_0
;test.c,9 :: 		pausa = delay / 5;
$00DE	$3005			MOVLW	5
$00DF	$00F4			MOVWF	STACK_4
$00E0	$3000			MOVLW	0
$00E1	$00F5			MOVWF	STACK_4+1
$00E2	$0824			MOVF	FARG_make_delay+0, 0
$00E3	$00F0			MOVWF	STACK_0
$00E4	$0825			MOVF	FARG_make_delay+1, 0
$00E5	$00F1			MOVWF	STACK_0+1
$00E6	$2089			CALL	_div_16x16_u
$00E7	$0870			MOVF	STACK_0, 0
$00E8	$00A6			MOVWF	make_delay_pausa_L0
$00E9	$0871			MOVF	STACK_0+1, 0
$00EA	$00A7			MOVWF	make_delay_pausa_L0+1
$00EB	$	L_make_delay_0:
;test.c,14 :: 		if ((delay >= 100) && (delay <= 200))
$00EB	$3000			MOVLW	0
$00EC	$0225			SUBWF	FARG_make_delay+1, 0
$00ED	$1D03			BTFSS	STATUS, Z
$00EE	$28F1			GOTO	L_make_delay_44
$00EF	$3064			MOVLW	100
$00F0	$0224			SUBWF	FARG_make_delay+0, 0
$00F1	$	L_make_delay_44:
$00F1	$1C03			BTFSS	STATUS, C
$00F2	$28FF			GOTO	L_make_delay_3
$00F3	$0825			MOVF	FARG_make_delay+1, 0
$00F4	$3C00			SUBLW	0
$00F5	$1D03			BTFSS	STATUS, Z
$00F6	$28F9			GOTO	L_make_delay_45
$00F7	$0824			MOVF	FARG_make_delay+0, 0
$00F8	$3CC8			SUBLW	200
$00F9	$	L_make_delay_45:
$00F9	$1C03			BTFSS	STATUS, C
$00FA	$28FF			GOTO	L_make_delay_3
$00FB	$	L15_ex_L_make_delay_3:
;test.c,15 :: 		pausa = 15;
$00FB	$300F			MOVLW	15
$00FC	$00A6			MOVWF	make_delay_pausa_L0
$00FD	$3000			MOVLW	0
$00FE	$00A7			MOVWF	make_delay_pausa_L0+1
$00FF	$	L_make_delay_3:
;test.c,17 :: 		if ((delay >= 201) && (delay <= 300))
$00FF	$3000			MOVLW	0
$0100	$0225			SUBWF	FARG_make_delay+1, 0
$0101	$1D03			BTFSS	STATUS, Z
$0102	$2905			GOTO	L_make_delay_46
$0103	$30C9			MOVLW	201
$0104	$0224			SUBWF	FARG_make_delay+0, 0
$0105	$	L_make_delay_46:
$0105	$1C03			BTFSS	STATUS, C
$0106	$2913			GOTO	L_make_delay_6
$0107	$0825			MOVF	FARG_make_delay+1, 0
$0108	$3C01			SUBLW	1
$0109	$1D03			BTFSS	STATUS, Z
$010A	$290D			GOTO	L_make_delay_47
$010B	$0824			MOVF	FARG_make_delay+0, 0
$010C	$3C2C			SUBLW	44
$010D	$	L_make_delay_47:
$010D	$1C03			BTFSS	STATUS, C
$010E	$2913			GOTO	L_make_delay_6
$010F	$	L28_ex_L_make_delay_6:
;test.c,18 :: 		pausa = 20;
$010F	$3014			MOVLW	20
$0110	$00A6			MOVWF	make_delay_pausa_L0
$0111	$3000			MOVLW	0
$0112	$00A7			MOVWF	make_delay_pausa_L0+1
$0113	$	L_make_delay_6:
;test.c,20 :: 		if ((delay >= 301) && (delay <= 400))
$0113	$3001			MOVLW	1
$0114	$0225			SUBWF	FARG_make_delay+1, 0
$0115	$1D03			BTFSS	STATUS, Z
$0116	$2919			GOTO	L_make_delay_48
$0117	$302D			MOVLW	45
$0118	$0224			SUBWF	FARG_make_delay+0, 0
$0119	$	L_make_delay_48:
$0119	$1C03			BTFSS	STATUS, C
$011A	$2927			GOTO	L_make_delay_9
$011B	$0825			MOVF	FARG_make_delay+1, 0
$011C	$3C01			SUBLW	1
$011D	$1D03			BTFSS	STATUS, Z
$011E	$2921			GOTO	L_make_delay_49
$011F	$0824			MOVF	FARG_make_delay+0, 0
$0120	$3C90			SUBLW	144
$0121	$	L_make_delay_49:
$0121	$1C03			BTFSS	STATUS, C
$0122	$2927			GOTO	L_make_delay_9
$0123	$	L41_ex_L_make_delay_9:
;test.c,21 :: 		pausa = 25;
$0123	$3019			MOVLW	25
$0124	$00A6			MOVWF	make_delay_pausa_L0
$0125	$3000			MOVLW	0
$0126	$00A7			MOVWF	make_delay_pausa_L0+1
$0127	$	L_make_delay_9:
;test.c,23 :: 		if ((delay >= 401) && (delay <= 500))
$0127	$3001			MOVLW	1
$0128	$0225			SUBWF	FARG_make_delay+1, 0
$0129	$1D03			BTFSS	STATUS, Z
$012A	$292D			GOTO	L_make_delay_50
$012B	$3091			MOVLW	145
$012C	$0224			SUBWF	FARG_make_delay+0, 0
$012D	$	L_make_delay_50:
$012D	$1C03			BTFSS	STATUS, C
$012E	$293B			GOTO	L_make_delay_12
$012F	$0825			MOVF	FARG_make_delay+1, 0
$0130	$3C01			SUBLW	1
$0131	$1D03			BTFSS	STATUS, Z
$0132	$2935			GOTO	L_make_delay_51
$0133	$0824			MOVF	FARG_make_delay+0, 0
$0134	$3CF4			SUBLW	244
$0135	$	L_make_delay_51:
$0135	$1C03			BTFSS	STATUS, C
$0136	$293B			GOTO	L_make_delay_12
$0137	$	L54_ex_L_make_delay_12:
;test.c,24 :: 		pausa = 30;
$0137	$301E			MOVLW	30
$0138	$00A6			MOVWF	make_delay_pausa_L0
$0139	$3000			MOVLW	0
$013A	$00A7			MOVWF	make_delay_pausa_L0+1
$013B	$	L_make_delay_12:
;test.c,26 :: 		if ((delay >= 501) && (delay <= 600))
$013B	$3001			MOVLW	1
$013C	$0225			SUBWF	FARG_make_delay+1, 0
$013D	$1D03			BTFSS	STATUS, Z
$013E	$2941			GOTO	L_make_delay_52
$013F	$30F5			MOVLW	245
$0140	$0224			SUBWF	FARG_make_delay+0, 0
$0141	$	L_make_delay_52:
$0141	$1C03			BTFSS	STATUS, C
$0142	$294F			GOTO	L_make_delay_15
$0143	$0825			MOVF	FARG_make_delay+1, 0
$0144	$3C02			SUBLW	2
$0145	$1D03			BTFSS	STATUS, Z
$0146	$2949			GOTO	L_make_delay_53
$0147	$0824			MOVF	FARG_make_delay+0, 0
$0148	$3C58			SUBLW	88
$0149	$	L_make_delay_53:
$0149	$1C03			BTFSS	STATUS, C
$014A	$294F			GOTO	L_make_delay_15
$014B	$	L67_ex_L_make_delay_15:
;test.c,27 :: 		pausa = 35;
$014B	$3023			MOVLW	35
$014C	$00A6			MOVWF	make_delay_pausa_L0
$014D	$3000			MOVLW	0
$014E	$00A7			MOVWF	make_delay_pausa_L0+1
$014F	$	L_make_delay_15:
;test.c,29 :: 		if ((delay >= 601) && (delay <= 700))
$014F	$3002			MOVLW	2
$0150	$0225			SUBWF	FARG_make_delay+1, 0
$0151	$1D03			BTFSS	STATUS, Z
$0152	$2955			GOTO	L_make_delay_54
$0153	$3059			MOVLW	89
$0154	$0224			SUBWF	FARG_make_delay+0, 0
$0155	$	L_make_delay_54:
$0155	$1C03			BTFSS	STATUS, C
$0156	$2963			GOTO	L_make_delay_18
$0157	$0825			MOVF	FARG_make_delay+1, 0
$0158	$3C02			SUBLW	2
$0159	$1D03			BTFSS	STATUS, Z
$015A	$295D			GOTO	L_make_delay_55
$015B	$0824			MOVF	FARG_make_delay+0, 0
$015C	$3CBC			SUBLW	188
$015D	$	L_make_delay_55:
$015D	$1C03			BTFSS	STATUS, C
$015E	$2963			GOTO	L_make_delay_18
$015F	$	L80_ex_L_make_delay_18:
;test.c,30 :: 		pausa = 40;
$015F	$3028			MOVLW	40
$0160	$00A6			MOVWF	make_delay_pausa_L0
$0161	$3000			MOVLW	0
$0162	$00A7			MOVWF	make_delay_pausa_L0+1
$0163	$	L_make_delay_18:
;test.c,32 :: 		if ((delay >= 701) && (delay <= 800))
$0163	$3002			MOVLW	2
$0164	$0225			SUBWF	FARG_make_delay+1, 0
$0165	$1D03			BTFSS	STATUS, Z
$0166	$2969			GOTO	L_make_delay_56
$0167	$30BD			MOVLW	189
$0168	$0224			SUBWF	FARG_make_delay+0, 0
$0169	$	L_make_delay_56:
$0169	$1C03			BTFSS	STATUS, C
$016A	$2977			GOTO	L_make_delay_21
$016B	$0825			MOVF	FARG_make_delay+1, 0
$016C	$3C03			SUBLW	3
$016D	$1D03			BTFSS	STATUS, Z
$016E	$2971			GOTO	L_make_delay_57
$016F	$0824			MOVF	FARG_make_delay+0, 0
$0170	$3C20			SUBLW	32
$0171	$	L_make_delay_57:
$0171	$1C03			BTFSS	STATUS, C
$0172	$2977			GOTO	L_make_delay_21
$0173	$	L93_ex_L_make_delay_21:
;test.c,33 :: 		pausa = 45;
$0173	$302D			MOVLW	45
$0174	$00A6			MOVWF	make_delay_pausa_L0
$0175	$3000			MOVLW	0
$0176	$00A7			MOVWF	make_delay_pausa_L0+1
$0177	$	L_make_delay_21:
;test.c,35 :: 		if ((delay >= 801) && (delay <= 900))
$0177	$3003			MOVLW	3
$0178	$0225			SUBWF	FARG_make_delay+1, 0
$0179	$1D03			BTFSS	STATUS, Z
$017A	$297D			GOTO	L_make_delay_58
$017B	$3021			MOVLW	33
$017C	$0224			SUBWF	FARG_make_delay+0, 0
$017D	$	L_make_delay_58:
$017D	$1C03			BTFSS	STATUS, C
$017E	$298B			GOTO	L_make_delay_24
$017F	$0825			MOVF	FARG_make_delay+1, 0
$0180	$3C03			SUBLW	3
$0181	$1D03			BTFSS	STATUS, Z
$0182	$2985			GOTO	L_make_delay_59
$0183	$0824			MOVF	FARG_make_delay+0, 0
$0184	$3C84			SUBLW	132
$0185	$	L_make_delay_59:
$0185	$1C03			BTFSS	STATUS, C
$0186	$298B			GOTO	L_make_delay_24
$0187	$	L106_ex_L_make_delay_24:
;test.c,36 :: 		pausa = 50;
$0187	$3032			MOVLW	50
$0188	$00A6			MOVWF	make_delay_pausa_L0
$0189	$3000			MOVLW	0
$018A	$00A7			MOVWF	make_delay_pausa_L0+1
$018B	$	L_make_delay_24:
;test.c,38 :: 		if (delay >= 901)
$018B	$3003			MOVLW	3
$018C	$0225			SUBWF	FARG_make_delay+1, 0
$018D	$1D03			BTFSS	STATUS, Z
$018E	$2991			GOTO	L_make_delay_60
$018F	$3085			MOVLW	133
$0190	$0224			SUBWF	FARG_make_delay+0, 0
$0191	$	L_make_delay_60:
$0191	$1C03			BTFSS	STATUS, C
$0192	$2997			GOTO	L_make_delay_25
;test.c,39 :: 		pausa = 55;
$0193	$3037			MOVLW	55
$0194	$00A6			MOVWF	make_delay_pausa_L0
$0195	$3000			MOVLW	0
$0196	$00A7			MOVWF	make_delay_pausa_L0+1
$0197	$	L_make_delay_25:
;test.c,41 :: 		VDelay_ms (pausa);
$0197	$0826			MOVF	make_delay_pausa_L0, 0
$0198	$00A8			MOVWF	FARG_VDelay_ms+0
$0199	$0827			MOVF	make_delay_pausa_L0+1, 0
$019A	$00A9			MOVWF	FARG_VDelay_ms+1
$019B	$2043			CALL	_VDelay_ms
;test.c,43 :: 		}
$019C	$0008			RETURN
$019D	$	_main:
;test.c,46 :: 		void main() {
;test.c,47 :: 		char enabled_motore_1 = 1;
$019D	$3001			MOVLW	1
$019E	$1303			BCF	STATUS, RP1
$019F	$1283			BCF	STATUS, RP0
$01A0	$00A0			MOVWF	main_enabled_motore_1_L0
;test.c,48 :: 		char enabled_motore_2 = 1;
$01A1	$3001			MOVLW	1
$01A2	$00A1			MOVWF	main_enabled_motore_2_L0
;test.c,50 :: 		int delay = 0;
$01A3	$01A2			CLRF	main_delay_L0
$01A4	$01A3			CLRF	main_delay_L0+1
;test.c,52 :: 		ADCON1 = 0x80;  // Configure analog inputs and Vref
$01A5	$3080			MOVLW	128
$01A6	$1683			BSF	STATUS, RP0
$01A7	$009F			MOVWF	ADCON1
;test.c,53 :: 		PORTA = 255;
$01A8	$30FF			MOVLW	255
$01A9	$1283			BCF	STATUS, RP0
$01AA	$0085			MOVWF	PORTA
;test.c,54 :: 		TRISA = 255;
$01AB	$30FF			MOVLW	255
$01AC	$1683			BSF	STATUS, RP0
$01AD	$0085			MOVWF	TRISA
;test.c,55 :: 		PORTB = 0;
$01AE	$1283			BCF	STATUS, RP0
$01AF	$0186			CLRF	PORTB, 1
;test.c,56 :: 		TRISB = 0b11110000;
$01B0	$30F0			MOVLW	240
$01B1	$1683			BSF	STATUS, RP0
$01B2	$0086			MOVWF	TRISB
;test.c,57 :: 		PORTC = 0;
$01B3	$1283			BCF	STATUS, RP0
$01B4	$0187			CLRF	PORTC, 1
;test.c,58 :: 		TRISC = 0;
$01B5	$1683			BSF	STATUS, RP0
$01B6	$0187			CLRF	TRISC, 1
;test.c,60 :: 		while(1) {
$01B7	$	L_main_26:
;test.c,62 :: 		delay = Adc_Read(0) ;
$01B7	$1283			BCF	STATUS, RP0
$01B8	$01A4			CLRF	FARG_Adc_Read+0, 1
$01B9	$20A6			CALL	_Adc_Read
$01BA	$0870			MOVF	STACK_0, 0
$01BB	$1283			BCF	STATUS, RP0
$01BC	$00A2			MOVWF	main_delay_L0
$01BD	$0871			MOVF	STACK_0+1, 0
$01BE	$00A3			MOVWF	main_delay_L0+1
;test.c,66 :: 		if ((PORTB.F6 == 0) && (PORTB.F7 == 0)){
$01BF	$3000			MOVLW	0
$01C0	$1B06			BTFSC	PORTB, 6
$01C1	$3001			MOVLW	1
$01C2	$00F2			MOVWF	STACK_2
$01C3	$0872			MOVF	STACK_2, 0
$01C4	$3A00			XORLW	0
$01C5	$1D03			BTFSS	STATUS, Z
$01C6	$29D1			GOTO	L_main_30
$01C7	$3000			MOVLW	0
$01C8	$1B86			BTFSC	PORTB, 7
$01C9	$3001			MOVLW	1
$01CA	$00F2			MOVWF	STACK_2
$01CB	$0872			MOVF	STACK_2, 0
$01CC	$3A00			XORLW	0
$01CD	$1D03			BTFSS	STATUS, Z
$01CE	$29D1			GOTO	L_main_30
$01CF	$	L92_ex_L_main_30:
;test.c,67 :: 		enabled_motore_1 = 0;
$01CF	$01A0			CLRF	main_enabled_motore_1_L0, 1
;test.c,68 :: 		PORTC.F1 = 0;
$01D0	$1087			BCF	PORTC, 1
;test.c,69 :: 		}
$01D1	$	L_main_30:
;test.c,71 :: 		if (PORTB.F6 == 1) {
$01D1	$3000			MOVLW	0
$01D2	$1B06			BTFSC	PORTB, 6
$01D3	$3001			MOVLW	1
$01D4	$00F2			MOVWF	STACK_2
$01D5	$0872			MOVF	STACK_2, 0
$01D6	$3A01			XORLW	1
$01D7	$1D03			BTFSS	STATUS, Z
$01D8	$29DC			GOTO	L_main_31
;test.c,72 :: 		enabled_motore_1 = 1;
$01D9	$3001			MOVLW	1
$01DA	$00A0			MOVWF	main_enabled_motore_1_L0
;test.c,73 :: 		PORTB.F0 = 1;
$01DB	$1406			BSF	PORTB, 0
;test.c,74 :: 		}
$01DC	$	L_main_31:
;test.c,76 :: 		if (PORTB.F7 == 1) {
$01DC	$3000			MOVLW	0
$01DD	$1B86			BTFSC	PORTB, 7
$01DE	$3001			MOVLW	1
$01DF	$00F2			MOVWF	STACK_2
$01E0	$0872			MOVF	STACK_2, 0
$01E1	$3A01			XORLW	1
$01E2	$1D03			BTFSS	STATUS, Z
$01E3	$29E7			GOTO	L_main_32
;test.c,77 :: 		enabled_motore_1 = 1;
$01E4	$3001			MOVLW	1
$01E5	$00A0			MOVWF	main_enabled_motore_1_L0
;test.c,78 :: 		PORTB.F0 = 0;
$01E6	$1006			BCF	PORTB, 0
;test.c,79 :: 		}
$01E7	$	L_main_32:
;test.c,85 :: 		if ((PORTB.F4 == 0) && (PORTB.F5 == 0)){
$01E7	$3000			MOVLW	0
$01E8	$1A06			BTFSC	PORTB, 4
$01E9	$3001			MOVLW	1
$01EA	$00F2			MOVWF	STACK_2
$01EB	$0872			MOVF	STACK_2, 0
$01EC	$3A00			XORLW	0
$01ED	$1D03			BTFSS	STATUS, Z
$01EE	$29F9			GOTO	L_main_35
$01EF	$3000			MOVLW	0
$01F0	$1A86			BTFSC	PORTB, 5
$01F1	$3001			MOVLW	1
$01F2	$00F2			MOVWF	STACK_2
$01F3	$0872			MOVF	STACK_2, 0
$01F4	$3A00			XORLW	0
$01F5	$1D03			BTFSS	STATUS, Z
$01F6	$29F9			GOTO	L_main_35
$01F7	$	L132_ex_L_main_35:
;test.c,86 :: 		enabled_motore_2 = 0;
$01F7	$01A1			CLRF	main_enabled_motore_2_L0, 1
;test.c,87 :: 		PORTC.F2 = 0;
$01F8	$1107			BCF	PORTC, 2
;test.c,88 :: 		}
$01F9	$	L_main_35:
;test.c,90 :: 		if (PORTB.F4 == 1) {
$01F9	$3000			MOVLW	0
$01FA	$1A06			BTFSC	PORTB, 4
$01FB	$3001			MOVLW	1
$01FC	$00F2			MOVWF	STACK_2
$01FD	$0872			MOVF	STACK_2, 0
$01FE	$3A01			XORLW	1
$01FF	$1D03			BTFSS	STATUS, Z
$0200	$2A04			GOTO	L_main_36
;test.c,91 :: 		enabled_motore_2 = 1;
$0201	$3001			MOVLW	1
$0202	$00A1			MOVWF	main_enabled_motore_2_L0
;test.c,92 :: 		PORTB.F2 = 1;
$0203	$1506			BSF	PORTB, 2
;test.c,93 :: 		}
$0204	$	L_main_36:
;test.c,95 :: 		if (PORTB.F5 == 1) {
$0204	$3000			MOVLW	0
$0205	$1A86			BTFSC	PORTB, 5
$0206	$3001			MOVLW	1
$0207	$00F2			MOVWF	STACK_2
$0208	$0872			MOVF	STACK_2, 0
$0209	$3A01			XORLW	1
$020A	$1D03			BTFSS	STATUS, Z
$020B	$2A0F			GOTO	L_main_37
;test.c,96 :: 		enabled_motore_2 = 1;
$020C	$3001			MOVLW	1
$020D	$00A1			MOVWF	main_enabled_motore_2_L0
;test.c,97 :: 		PORTB.F2 = 0;
$020E	$1106			BCF	PORTB, 2
;test.c,98 :: 		}
$020F	$	L_main_37:
;test.c,100 :: 		if ( (enabled_motore_1 == 1) || (enabled_motore_2 == 1) ){
$020F	$0820			MOVF	main_enabled_motore_1_L0, 0
$0210	$3A01			XORLW	1
$0211	$1903			BTFSC	STATUS, Z
$0212	$2A17			GOTO	L164_ex_L_main_40
$0213	$0821			MOVF	main_enabled_motore_2_L0, 0
$0214	$3A01			XORLW	1
$0215	$1D03			BTFSS	STATUS, Z
$0216	$2A3C			GOTO	L_main_40
$0217	$	L164_ex_L_main_40:
;test.c,101 :: 		if (enabled_motore_1 == 1)
$0217	$0820			MOVF	main_enabled_motore_1_L0, 0
$0218	$3A01			XORLW	1
$0219	$1D03			BTFSS	STATUS, Z
$021A	$2A27			GOTO	L_main_41
;test.c,102 :: 		PORTC.F1 = ~PORTC.F1;
$021B	$3000			MOVLW	0
$021C	$1887			BTFSC	PORTC, 1
$021D	$3001			MOVLW	1
$021E	$00F2			MOVWF	STACK_2
$021F	$0972			COMF	STACK_2, W
$0220	$00F0			MOVWF	STACK_0
$0221	$3000			MOVLW	0
$0222	$1870			BTFSC	STACK_0, 0
$0223	$3002			MOVLW	2
$0224	$0607			XORWF	PORTC, 0
$0225	$3902			ANDLW	2
$0226	$0687			XORWF	PORTC, 1
$0227	$	L_main_41:
;test.c,104 :: 		if (enabled_motore_2 == 1)
$0227	$0821			MOVF	main_enabled_motore_2_L0, 0
$0228	$3A01			XORLW	1
$0229	$1D03			BTFSS	STATUS, Z
$022A	$2A37			GOTO	L_main_42
;test.c,105 :: 		PORTC.F2 = ~PORTC.F2;
$022B	$3000			MOVLW	0
$022C	$1907			BTFSC	PORTC, 2
$022D	$3001			MOVLW	1
$022E	$00F2			MOVWF	STACK_2
$022F	$0972			COMF	STACK_2, W
$0230	$00F0			MOVWF	STACK_0
$0231	$3000			MOVLW	0
$0232	$1870			BTFSC	STACK_0, 0
$0233	$3004			MOVLW	4
$0234	$0607			XORWF	PORTC, 0
$0235	$3904			ANDLW	4
$0236	$0687			XORWF	PORTC, 1
$0237	$	L_main_42:
;test.c,107 :: 		make_delay(delay);
$0237	$0822			MOVF	main_delay_L0, 0
$0238	$00A4			MOVWF	FARG_make_delay+0
$0239	$0823			MOVF	main_delay_L0+1, 0
$023A	$00A5			MOVWF	FARG_make_delay+1
$023B	$20D4			CALL	_make_delay
;test.c,108 :: 		}
$023C	$	L_main_40:
;test.c,114 :: 		}
$023C	$29B7			GOTO	L_main_26
;test.c,115 :: 		}
$023D	$2A3D			GOTO	$
