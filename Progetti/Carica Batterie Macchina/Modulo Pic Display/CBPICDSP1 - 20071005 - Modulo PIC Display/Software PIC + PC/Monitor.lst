;  ASM code generated by mikroVirtualMachine for PIC - V. 6.2.1.0
;  Date/Time: 06/06/2008 22.45.04
;  Info: http://www.mikroelektronika.co.yu


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$158A			BSF	PCLATH, 3
$0001	$2800			GOTO	_main
$0004	$	_Delay_1us:
;delays.c,2 :: 		void Delay_1us() {
;delays.c,3 :: 		Delay_us(1);
$0004	$3001			MOVLW	1
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$00FA			MOVWF	STACK_10
$0008	$0BFA			DECFSZ	STACK_10, F
$0009	$2808			GOTO	$-1
$000A	$0000			NOP
;delays.c,4 :: 		}
$000B	$0008			RETURN
$000C	$	_Delay_5500us:
;delays.c,26 :: 		void Delay_5500us() {
;delays.c,27 :: 		Delay_us(5500);
$000C	$3024			MOVLW	36
$000D	$1303			BCF	STATUS, RP1
$000E	$1283			BCF	STATUS, RP0
$000F	$00FB			MOVWF	STACK_11
$0010	$30FF			MOVLW	255
$0011	$00FA			MOVWF	STACK_10
$0012	$0BFB			DECFSZ	STACK_11, F
$0013	$2815			GOTO	$+2
$0014	$2818			GOTO	$+4
$0015	$0BFA			DECFSZ	STACK_10, F
$0016	$2815			GOTO	$-1
$0017	$2812			GOTO	$-5
$0018	$309E			MOVLW	158
$0019	$00FA			MOVWF	STACK_10
$001A	$0BFA			DECFSZ	STACK_10, F
$001B	$281A			GOTO	$-1
;delays.c,28 :: 		}
$001C	$0008			RETURN
$001D	$	_Delay_50us:
;delays.c,14 :: 		void Delay_50us() {
;delays.c,15 :: 		Delay_us(50);
$001D	$3053			MOVLW	83
$001E	$1303			BCF	STATUS, RP1
$001F	$1283			BCF	STATUS, RP0
$0020	$00FA			MOVWF	STACK_10
$0021	$0BFA			DECFSZ	STACK_10, F
$0022	$2821			GOTO	$-1
;delays.c,16 :: 		}
$0023	$0008			RETURN
$0024	$	_Lcd_Cmd:
$0024	$1303			BCF	STATUS, RP1
$0025	$1283			BCF	STATUS, RP0
$0026	$0821			MOVF	LCD_port_address, 0
$0027	$0084			MOVWF	FSR
$0028	$085E			MOVF	FARG_Lcd_Cmd+0, 0
$0029	$1903			BTFSC	STATUS, Z
$002A	$282B			GOTO	L_Lcd_Cmd_0
$002B	$	L_Lcd_Cmd_0:
$002B	$0180			CLRF	INDF
$002C	$1BDE			BTFSC	FARG_Lcd_Cmd+0, 7
$002D	$1780			BSF	INDF, ___DB7
$002E	$1B5E			BTFSC	FARG_Lcd_Cmd+0, 6
$002F	$1700			BSF	INDF, ___DB6
$0030	$1ADE			BTFSC	FARG_Lcd_Cmd+0, 5
$0031	$1680			BSF	INDF, ___DB5
$0032	$1A5E			BTFSC	FARG_Lcd_Cmd+0, 4
$0033	$1600			BSF	INDF, ___DB4
$0034	$0822			MOVF	LCD_cmd_status, 0
$0035	$1903			BTFSC	STATUS, Z
$0036	$2839			GOTO	L_Lcd_Cmd_1
$0037	$1100			BCF	INDF, ___RS
$0038	$283A			GOTO	L_Lcd_Cmd_2
$0039	$	L_Lcd_Cmd_1:
$0039	$1500			BSF	INDF, ___RS
$003A	$	L_Lcd_Cmd_2:
$003A	$1580			BSF	INDF, ___ENABLE
$003B	$2004			CALL	_Delay_1us
$003C	$085E			MOVF	FARG_Lcd_Cmd+0, 0
$003D	$1903			BTFSC	STATUS, Z
$003E	$283F			GOTO	L_Lcd_Cmd_3
$003F	$	L_Lcd_Cmd_3:
$003F	$1180			BCF	INDF, ___ENABLE
$0040	$0180			CLRF	INDF
$0041	$19DE			BTFSC	FARG_Lcd_Cmd+0, 3
$0042	$1780			BSF	INDF, ___DB7
$0043	$195E			BTFSC	FARG_Lcd_Cmd+0, 2
$0044	$1700			BSF	INDF, ___DB6
$0045	$18DE			BTFSC	FARG_Lcd_Cmd+0, 1
$0046	$1680			BSF	INDF, ___DB5
$0047	$185E			BTFSC	FARG_Lcd_Cmd+0, 0
$0048	$1600			BSF	INDF, ___DB4
$0049	$0822			MOVF	LCD_cmd_status, 0
$004A	$1903			BTFSC	STATUS, Z
$004B	$284E			GOTO	L_Lcd_Cmd_4
$004C	$1100			BCF	INDF, ___RS
$004D	$284F			GOTO	L_Lcd_Cmd_5
$004E	$	L_Lcd_Cmd_4:
$004E	$1500			BSF	INDF, ___RS
$004F	$	L_Lcd_Cmd_5:
$004F	$1580			BSF	INDF, ___ENABLE
$0050	$2004			CALL	_Delay_1us
$0051	$1180			BCF	INDF, ___ENABLE
$0052	$0822			MOVF	LCD_cmd_status, 0
$0053	$1903			BTFSC	STATUS, Z
$0054	$2857			GOTO	L_Lcd_Cmd_6
$0055	$200C			CALL	_Delay_5500us
$0056	$2858			GOTO	L_Lcd_Cmd_7
$0057	$	L_Lcd_Cmd_6:
$0057	$201D			CALL	_Delay_50us
$0058	$	L_Lcd_Cmd_7:
$0058	$0008			RETURN
$0059	$	_Lcd_Chr_CP:
$0059	$1303			BCF	STATUS, RP1
$005A	$1283			BCF	STATUS, RP0
$005B	$01A2			CLRF	LCD_cmd_status, 1
$005C	$085D			MOVF	FARG_Lcd_Chr_CP+0, 0
$005D	$00DE			MOVWF	FARG_Lcd_Cmd+0
$005E	$2024			CALL	_Lcd_Cmd
$005F	$3001			MOVLW	1
$0060	$00A2			MOVWF	LCD_cmd_status
$0061	$0008			RETURN
$0062	$	_LCD_Out:
$0062	$2874			GOTO	L_LCD_Out_17
$0063	$	L_LCD_Out_19:
$0063	$3080			MOVLW	128
$0064	$1303			BCF	STATUS, RP1
$0065	$1283			BCF	STATUS, RP0
$0066	$00D9			MOVWF	FARG_LCD_Out+0
$0067	$2887			GOTO	L_LCD_Out_18
$0068	$	L_LCD_Out_20:
$0068	$30C0			MOVLW	192
$0069	$00D9			MOVWF	FARG_LCD_Out+0
$006A	$2887			GOTO	L_LCD_Out_18
$006B	$	L_LCD_Out_21:
$006B	$3094			MOVLW	148
$006C	$00D9			MOVWF	FARG_LCD_Out+0
$006D	$2887			GOTO	L_LCD_Out_18
$006E	$	L_LCD_Out_22:
$006E	$30D4			MOVLW	212
$006F	$00D9			MOVWF	FARG_LCD_Out+0
$0070	$2887			GOTO	L_LCD_Out_18
$0071	$	L_LCD_Out_23:
$0071	$3080			MOVLW	128
$0072	$00D9			MOVWF	FARG_LCD_Out+0
$0073	$2887			GOTO	L_LCD_Out_18
$0074	$	L_LCD_Out_17:
$0074	$1303			BCF	STATUS, RP1
$0075	$1283			BCF	STATUS, RP0
$0076	$0859			MOVF	FARG_LCD_Out+0, 0
$0077	$3A01			XORLW	1
$0078	$1903			BTFSC	STATUS, Z
$0079	$2863			GOTO	L_LCD_Out_19
$007A	$0859			MOVF	FARG_LCD_Out+0, 0
$007B	$3A02			XORLW	2
$007C	$1903			BTFSC	STATUS, Z
$007D	$2868			GOTO	L_LCD_Out_20
$007E	$0859			MOVF	FARG_LCD_Out+0, 0
$007F	$3A03			XORLW	3
$0080	$1903			BTFSC	STATUS, Z
$0081	$286B			GOTO	L_LCD_Out_21
$0082	$0859			MOVF	FARG_LCD_Out+0, 0
$0083	$3A04			XORLW	4
$0084	$1903			BTFSC	STATUS, Z
$0085	$286E			GOTO	L_LCD_Out_22
$0086	$2871			GOTO	L_LCD_Out_23
$0087	$	L_LCD_Out_18:
$0087	$035A			DECF	FARG_LCD_Out+1, 0
$0088	$00F0			MOVWF	STACK_0
$0089	$0859			MOVF	FARG_LCD_Out+0, 0
$008A	$07F0			ADDWF	STACK_0, 1
$008B	$0870			MOVF	STACK_0, 0
$008C	$00D9			MOVWF	FARG_LCD_Out+0
$008D	$0870			MOVF	STACK_0, 0
$008E	$00DE			MOVWF	FARG_Lcd_Cmd+0
$008F	$2024			CALL	_Lcd_Cmd
$0090	$01A2			CLRF	LCD_cmd_status, 1
$0091	$01DC			CLRF	LCD_Out_i_L0, 1
$0092	$	L_LCD_Out_24:
$0092	$085C			MOVF	LCD_Out_i_L0, 0
$0093	$075B			ADDWF	FARG_LCD_Out+2, 0
$0094	$0084			MOVWF	FSR
$0095	$0800			MOVF	INDF, 0
$0096	$00F0			MOVWF	STACK_0
$0097	$0870			MOVF	STACK_0, 0
$0098	$1903			BTFSC	STATUS, Z
$0099	$28A2			GOTO	L_LCD_Out_25
$009A	$085C			MOVF	LCD_Out_i_L0, 0
$009B	$075B			ADDWF	FARG_LCD_Out+2, 0
$009C	$0084			MOVWF	FSR
$009D	$0800			MOVF	INDF, 0
$009E	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$009F	$2059			CALL	_Lcd_Chr_CP
$00A0	$0ADC			INCF	LCD_Out_i_L0, 1
$00A1	$2892			GOTO	L_LCD_Out_24
$00A2	$	L_LCD_Out_25:
$00A2	$3001			MOVLW	1
$00A3	$00A2			MOVWF	LCD_cmd_status
$00A4	$0008			RETURN
$00A5	$	_____DoICP:
$00A5	$1303			BCF	STATUS, RP1
$00A6	$1283			BCF	STATUS, RP0
$00A7	$0824			MOVF	___DoICPHiAddr, 0
$00A8	$008A			MOVWF	PCLATH
$00A9	$0825			MOVF	___DoICPLoAddr, 0
$00AA	$0082			MOVWF	PCL
$00AB	$0008			RETURN
$00AC	$	_SDIV3232L:
$00AC	$1303			BCF	STATUS, RP1
$00AD	$1283			BCF	STATUS, RP0
$00AE	$0874			MOVF	STACK_4, W
$00AF	$02F8			SUBWF	STACK_8, F
$00B0	$0875			MOVF	STACK_5, W
$00B1	$1C03			BTFSS	STATUS, C
$00B2	$0F75			INCFSZ	STACK_5, W
$00B3	$02F9			SUBWF	STACK_9, F
$00B4	$0876			MOVF	STACK_6, W
$00B5	$1C03			BTFSS	STATUS, C
$00B6	$0F76			INCFSZ	STACK_6, W
$00B7	$02FA			SUBWF	STACK_10, F
$00B8	$0877			MOVF	STACK_7, W
$00B9	$1C03			BTFSS	STATUS, C
$00BA	$0F77			INCFSZ	STACK_7, W
$00BB	$02FB			SUBWF	STACK_11, F
$00BC	$0DF3			RLF	STACK_3, F
$00BD	$3007			MOVLW	7
$00BE	$00FC			MOVWF	STACK_12
$00BF	$	LOOPS3232A:
$00BF	$0D73			RLF	STACK_3, W
$00C0	$0DF8			RLF	STACK_8, F
$00C1	$0DF9			RLF	STACK_9, F
$00C2	$0DFA			RLF	STACK_10, F
$00C3	$0DFB			RLF	STACK_11, F
$00C4	$0874			MOVF	STACK_4, W
$00C5	$1C73			BTFSS	STACK_3, 0
$00C6	$28D5			GOTO	SADD22LA
$00C7	$02F8			SUBWF	STACK_8, F
$00C8	$0875			MOVF	STACK_5, W
$00C9	$1C03			BTFSS	STATUS, C
$00CA	$0F75			INCFSZ	STACK_5, W
$00CB	$02F9			SUBWF	STACK_9, F
$00CC	$0876			MOVF	STACK_6, W
$00CD	$1C03			BTFSS	STATUS, C
$00CE	$0F76			INCFSZ	STACK_6, W
$00CF	$02FA			SUBWF	STACK_10, F
$00D0	$0877			MOVF	STACK_7, W
$00D1	$1C03			BTFSS	STATUS, C
$00D2	$0F77			INCFSZ	STACK_7, W
$00D3	$02FB			SUBWF	STACK_11, F
$00D4	$28E2			GOTO	SOK22LA
$00D5	$	SADD22LA:
$00D5	$07F8			ADDWF	STACK_8, F
$00D6	$0875			MOVF	STACK_5, W
$00D7	$1803			BTFSC	STATUS, C
$00D8	$0F75			INCFSZ	STACK_5, W
$00D9	$07F9			ADDWF	STACK_9, F
$00DA	$0876			MOVF	STACK_6, W
$00DB	$1803			BTFSC	STATUS, C
$00DC	$0F76			INCFSZ	STACK_6, W
$00DD	$07FA			ADDWF	STACK_10, F
$00DE	$0877			MOVF	STACK_7, W
$00DF	$1803			BTFSC	STATUS, C
$00E0	$0F77			INCFSZ	STACK_7, W
$00E1	$07FB			ADDWF	STACK_11, F
$00E2	$	SOK22LA:
$00E2	$0DF3			RLF	STACK_3, F
$00E3	$0BFC			DECFSZ	STACK_12, F
$00E4	$28BF			GOTO	LOOPS3232A
$00E5	$0D72			RLF	STACK_2, W
$00E6	$0DF8			RLF	STACK_8, F
$00E7	$0DF9			RLF	STACK_9, F
$00E8	$0DFA			RLF	STACK_10, F
$00E9	$0DFB			RLF	STACK_11, F
$00EA	$0874			MOVF	STACK_4, W
$00EB	$1C73			BTFSS	STACK_3, 0
$00EC	$28FB			GOTO	SADD22L8
$00ED	$02F8			SUBWF	STACK_8, F
$00EE	$0875			MOVF	STACK_5, W
$00EF	$1C03			BTFSS	STATUS, C
$00F0	$0F75			INCFSZ	STACK_5, W
$00F1	$02F9			SUBWF	STACK_9, F
$00F2	$0876			MOVF	STACK_6, W
$00F3	$1C03			BTFSS	STATUS, C
$00F4	$0F76			INCFSZ	STACK_6, W
$00F5	$02FA			SUBWF	STACK_10, F
$00F6	$0877			MOVF	STACK_7, W
$00F7	$1C03			BTFSS	STATUS, C
$00F8	$0F77			INCFSZ	STACK_7, W
$00F9	$02FB			SUBWF	STACK_11, F
$00FA	$2908			GOTO	SOK22L8
$00FB	$	SADD22L8:
$00FB	$07F8			ADDWF	STACK_8, F
$00FC	$0875			MOVF	STACK_5, W
$00FD	$1803			BTFSC	STATUS, C
$00FE	$0F75			INCFSZ	STACK_5, W
$00FF	$07F9			ADDWF	STACK_9, F
$0100	$0876			MOVF	STACK_6, W
$0101	$1803			BTFSC	STATUS, C
$0102	$0F76			INCFSZ	STACK_6, W
$0103	$07FA			ADDWF	STACK_10, F
$0104	$0877			MOVF	STACK_7, W
$0105	$1803			BTFSC	STATUS, C
$0106	$0F77			INCFSZ	STACK_7, W
$0107	$07FB			ADDWF	STACK_11, F
$0108	$	SOK22L8:
$0108	$0DF2			RLF	STACK_2, F
$0109	$3007			MOVLW	7
$010A	$00FC			MOVWF	STACK_12
$010B	$	LOOPS3232B:
$010B	$0D72			RLF	STACK_2, W
$010C	$0DF8			RLF	STACK_8, F
$010D	$0DF9			RLF	STACK_9, F
$010E	$0DFA			RLF	STACK_10, F
$010F	$0DFB			RLF	STACK_11, F
$0110	$0874			MOVF	STACK_4, W
$0111	$1C72			BTFSS	STACK_2, 0
$0112	$2921			GOTO	SADD22LB
$0113	$02F8			SUBWF	STACK_8, F
$0114	$0875			MOVF	STACK_5, W
$0115	$1C03			BTFSS	STATUS, C
$0116	$0F75			INCFSZ	STACK_5, W
$0117	$02F9			SUBWF	STACK_9, F
$0118	$0876			MOVF	STACK_6, W
$0119	$1C03			BTFSS	STATUS, C
$011A	$0F76			INCFSZ	STACK_6, W
$011B	$02FA			SUBWF	STACK_10, F
$011C	$0877			MOVF	STACK_7, W
$011D	$1C03			BTFSS	STATUS, C
$011E	$0F77			INCFSZ	STACK_7, W
$011F	$02FB			SUBWF	STACK_11, F
$0120	$292E			GOTO	SOK22LB
$0121	$	SADD22LB:
$0121	$07F8			ADDWF	STACK_8, F
$0122	$0875			MOVF	STACK_5, W
$0123	$1803			BTFSC	STATUS, C
$0124	$0F75			INCFSZ	STACK_5, W
$0125	$07F9			ADDWF	STACK_9, F
$0126	$0876			MOVF	STACK_6, W
$0127	$1803			BTFSC	STATUS, C
$0128	$0F76			INCFSZ	STACK_6, W
$0129	$07FA			ADDWF	STACK_10, F
$012A	$0877			MOVF	STACK_7, W
$012B	$1803			BTFSC	STATUS, C
$012C	$0F77			INCFSZ	STACK_7, W
$012D	$07FB			ADDWF	STACK_11, F
$012E	$	SOK22LB:
$012E	$0DF2			RLF	STACK_2, F
$012F	$0BFC			DECFSZ	STACK_12, F
$0130	$290B			GOTO	LOOPS3232B
$0131	$0D71			RLF	STACK_1, W
$0132	$0DF8			RLF	STACK_8, F
$0133	$0DF9			RLF	STACK_9, F
$0134	$0DFA			RLF	STACK_10, F
$0135	$0DFB			RLF	STACK_11, F
$0136	$0874			MOVF	STACK_4, W
$0137	$1C72			BTFSS	STACK_2, 0
$0138	$2947			GOTO	SADD22L16
$0139	$02F8			SUBWF	STACK_8, F
$013A	$0875			MOVF	STACK_5, W
$013B	$1C03			BTFSS	STATUS, C
$013C	$0F75			INCFSZ	STACK_5, W
$013D	$02F9			SUBWF	STACK_9, F
$013E	$0876			MOVF	STACK_6, W
$013F	$1C03			BTFSS	STATUS, C
$0140	$0F76			INCFSZ	STACK_6, W
$0141	$02FA			SUBWF	STACK_10, F
$0142	$0877			MOVF	STACK_7, W
$0143	$1C03			BTFSS	STATUS, C
$0144	$0F77			INCFSZ	STACK_7, W
$0145	$02FB			SUBWF	STACK_11, F
$0146	$2954			GOTO	SOK22L16
$0147	$	SADD22L16:
$0147	$07F8			ADDWF	STACK_8, F
$0148	$0875			MOVF	STACK_5, W
$0149	$1803			BTFSC	STATUS, C
$014A	$0F75			INCFSZ	STACK_5, W
$014B	$07F9			ADDWF	STACK_9, F
$014C	$0876			MOVF	STACK_6, W
$014D	$1803			BTFSC	STATUS, C
$014E	$0F76			INCFSZ	STACK_6, W
$014F	$07FA			ADDWF	STACK_10, F
$0150	$0877			MOVF	STACK_7, W
$0151	$1803			BTFSC	STATUS, C
$0152	$0F77			INCFSZ	STACK_7, W
$0153	$07FB			ADDWF	STACK_11, F
$0154	$	SOK22L16:
$0154	$0DF1			RLF	STACK_1, F
$0155	$3007			MOVLW	7
$0156	$00FC			MOVWF	STACK_12
$0157	$	LOOPS3232C:
$0157	$0D71			RLF	STACK_1, W
$0158	$0DF8			RLF	STACK_8, F
$0159	$0DF9			RLF	STACK_9, F
$015A	$0DFA			RLF	STACK_10, F
$015B	$0DFB			RLF	STACK_11, F
$015C	$0874			MOVF	STACK_4, W
$015D	$1C71			BTFSS	STACK_1, 0
$015E	$296D			GOTO	SADD22LC
$015F	$02F8			SUBWF	STACK_8, F
$0160	$0875			MOVF	STACK_5, W
$0161	$1C03			BTFSS	STATUS, C
$0162	$0F75			INCFSZ	STACK_5, W
$0163	$02F9			SUBWF	STACK_9, F
$0164	$0876			MOVF	STACK_6, W
$0165	$1C03			BTFSS	STATUS, C
$0166	$0F76			INCFSZ	STACK_6, W
$0167	$02FA			SUBWF	STACK_10, F
$0168	$0877			MOVF	STACK_7, W
$0169	$1C03			BTFSS	STATUS, C
$016A	$0F77			INCFSZ	STACK_7, W
$016B	$02FB			SUBWF	STACK_11, F
$016C	$297A			GOTO	SOK22LC
$016D	$	SADD22LC:
$016D	$07F8			ADDWF	STACK_8, F
$016E	$0875			MOVF	STACK_5, W
$016F	$1803			BTFSC	STATUS, C
$0170	$0F75			INCFSZ	STACK_5, W
$0171	$07F9			ADDWF	STACK_9, F
$0172	$0876			MOVF	STACK_6, W
$0173	$1803			BTFSC	STATUS, C
$0174	$0F76			INCFSZ	STACK_6, W
$0175	$07FA			ADDWF	STACK_10, F
$0176	$0877			MOVF	STACK_7, W
$0177	$1803			BTFSC	STATUS, C
$0178	$0F77			INCFSZ	STACK_7, W
$0179	$07FB			ADDWF	STACK_11, F
$017A	$	SOK22LC:
$017A	$0DF1			RLF	STACK_1, F
$017B	$0BFC			DECFSZ	STACK_12, F
$017C	$2957			GOTO	LOOPS3232C
$017D	$0D70			RLF	STACK_0, W
$017E	$0DF8			RLF	STACK_8, F
$017F	$0DF9			RLF	STACK_9, F
$0180	$0DFA			RLF	STACK_10, F
$0181	$0DFB			RLF	STACK_11, F
$0182	$0874			MOVF	STACK_4, W
$0183	$1C71			BTFSS	STACK_1, 0
$0184	$2993			GOTO	SADD22L24
$0185	$02F8			SUBWF	STACK_8, F
$0186	$0875			MOVF	STACK_5, W
$0187	$1C03			BTFSS	STATUS, C
$0188	$0F75			INCFSZ	STACK_5, W
$0189	$02F9			SUBWF	STACK_9, F
$018A	$0876			MOVF	STACK_6, W
$018B	$1C03			BTFSS	STATUS, C
$018C	$0F76			INCFSZ	STACK_6, W
$018D	$02FA			SUBWF	STACK_10, F
$018E	$0877			MOVF	STACK_7, W
$018F	$1C03			BTFSS	STATUS, C
$0190	$0F77			INCFSZ	STACK_7, W
$0191	$02FB			SUBWF	STACK_11, F
$0192	$29A0			GOTO	SOK22L24
$0193	$	SADD22L24:
$0193	$07F8			ADDWF	STACK_8, F
$0194	$0875			MOVF	STACK_5, W
$0195	$1803			BTFSC	STATUS, C
$0196	$0F75			INCFSZ	STACK_5, W
$0197	$07F9			ADDWF	STACK_9, F
$0198	$0876			MOVF	STACK_6, W
$0199	$1803			BTFSC	STATUS, C
$019A	$0F76			INCFSZ	STACK_6, W
$019B	$07FA			ADDWF	STACK_10, F
$019C	$0877			MOVF	STACK_7, W
$019D	$1803			BTFSC	STATUS, C
$019E	$0F77			INCFSZ	STACK_7, W
$019F	$07FB			ADDWF	STACK_11, F
$01A0	$	SOK22L24:
$01A0	$0DF0			RLF	STACK_0, F
$01A1	$3007			MOVLW	7
$01A2	$00FC			MOVWF	STACK_12
$01A3	$	LOOPS3232D:
$01A3	$0D70			RLF	STACK_0, W
$01A4	$0DF8			RLF	STACK_8, F
$01A5	$0DF9			RLF	STACK_9, F
$01A6	$0DFA			RLF	STACK_10, F
$01A7	$0DFB			RLF	STACK_11, F
$01A8	$0874			MOVF	STACK_4, W
$01A9	$1C70			BTFSS	STACK_0, 0
$01AA	$29B9			GOTO	SADD22LD
$01AB	$02F8			SUBWF	STACK_8, F
$01AC	$0875			MOVF	STACK_5, W
$01AD	$1C03			BTFSS	STATUS, C
$01AE	$0F75			INCFSZ	STACK_5, W
$01AF	$02F9			SUBWF	STACK_9, F
$01B0	$0876			MOVF	STACK_6, W
$01B1	$1C03			BTFSS	STATUS, C
$01B2	$0F76			INCFSZ	STACK_6, W
$01B3	$02FA			SUBWF	STACK_10, F
$01B4	$0877			MOVF	STACK_7, W
$01B5	$1C03			BTFSS	STATUS, C
$01B6	$0F77			INCFSZ	STACK_7, W
$01B7	$02FB			SUBWF	STACK_11, F
$01B8	$29C6			GOTO	SOK22LD
$01B9	$	SADD22LD:
$01B9	$07F8			ADDWF	STACK_8, F
$01BA	$0875			MOVF	STACK_5, W
$01BB	$1803			BTFSC	STATUS, C
$01BC	$0F75			INCFSZ	STACK_5, W
$01BD	$07F9			ADDWF	STACK_9, F
$01BE	$0876			MOVF	STACK_6, W
$01BF	$1803			BTFSC	STATUS, C
$01C0	$0F76			INCFSZ	STACK_6, W
$01C1	$07FA			ADDWF	STACK_10, F
$01C2	$0877			MOVF	STACK_7, W
$01C3	$1803			BTFSC	STATUS, C
$01C4	$0F77			INCFSZ	STACK_7, W
$01C5	$07FB			ADDWF	STACK_11, F
$01C6	$	SOK22LD:
$01C6	$0DF0			RLF	STACK_0, F
$01C7	$0BFC			DECFSZ	STACK_12, F
$01C8	$29A3			GOTO	LOOPS3232D
$01C9	$1870			BTFSC	STACK_0, 0
$01CA	$29D9			GOTO	SOK22L
$01CB	$0874			MOVF	STACK_4, W
$01CC	$07F8			ADDWF	STACK_8, F
$01CD	$0875			MOVF	STACK_5, W
$01CE	$1803			BTFSC	STATUS, C
$01CF	$0F75			INCFSZ	STACK_5, W
$01D0	$07F9			ADDWF	STACK_9, F
$01D1	$0876			MOVF	STACK_6, W
$01D2	$1803			BTFSC	STATUS, C
$01D3	$0F76			INCFSZ	STACK_6, W
$01D4	$07FA			ADDWF	STACK_10, F
$01D5	$0877			MOVF	STACK_7, W
$01D6	$1803			BTFSC	STATUS, C
$01D7	$0F77			INCFSZ	STACK_7, W
$01D8	$07FB			ADDWF	STACK_11, F
$01D9	$	SOK22L:
$01D9	$0008			RETURN
$01DA	$	_COMFREM:
$01DA	$1303			BCF	STATUS, RP1
$01DB	$1283			BCF	STATUS, RP0
$01DC	$09FB			COMF	STACK_11, F
$01DD	$09FA			COMF	STACK_10, F
$01DE	$09F9			COMF	STACK_9, F
$01DF	$09F8			COMF	STACK_8, F
$01E0	$0AF8			INCF	STACK_8, F
$01E1	$1903			BTFSC	STATUS, Z
$01E2	$0AF9			INCF	STACK_9, F
$01E3	$1903			BTFSC	STATUS, Z
$01E4	$0AFA			INCF	STACK_10, F
$01E5	$1903			BTFSC	STATUS, Z
$01E6	$0AFB			INCF	STACK_11, F
$01E7	$0008			RETURN
$01E8	$	_Lcd_Init:
$01E8	$200C			CALL	_Delay_5500us
$01E9	$200C			CALL	_Delay_5500us
$01EA	$200C			CALL	_Delay_5500us
$01EB	$0844			MOVF	FARG_Lcd_Init+0, 0
$01EC	$00A1			MOVWF	LCD_port_address
$01ED	$0844			MOVF	FARG_Lcd_Init+0, 0
$01EE	$0084			MOVWF	FSR
$01EF	$0180			CLRF	INDF, 1
$01F0	$1784			BSF	FSR, 7
$01F1	$0180			CLRF	INDF
$01F2	$1384			BCF	FSR, 7
$01F3	$1680			BSF	INDF, ___DB5
$01F4	$1600			BSF	INDF, ___DB4
$01F5	$1580			BSF	INDF, ___ENABLE
$01F6	$1180			BCF	INDF, ___ENABLE
$01F7	$200C			CALL	_Delay_5500us
$01F8	$1580			BSF	INDF, ___ENABLE
$01F9	$1180			BCF	INDF, ___ENABLE
$01FA	$200C			CALL	_Delay_5500us
$01FB	$1580			BSF	INDF, ___ENABLE
$01FC	$1180			BCF	INDF, ___ENABLE
$01FD	$200C			CALL	_Delay_5500us
$01FE	$1680			BSF	INDF, ___DB5
$01FF	$1200			BCF	INDF, ___DB4
$0200	$1580			BSF	INDF, ___ENABLE
$0201	$1180			BCF	INDF, ___ENABLE
$0202	$200C			CALL	_Delay_5500us
$0203	$0180			CLRF	INDF
$0204	$1680			BSF	INDF, ___DB5
$0205	$1580			BSF	INDF, ___ENABLE
$0206	$1180			BCF	INDF, ___ENABLE
$0207	$0180			CLRF	INDF
$0208	$1780			BSF	INDF, ___DB7
$0209	$1580			BSF	INDF, ___ENABLE
$020A	$1180			BCF	INDF, ___ENABLE
$020B	$200C			CALL	_Delay_5500us
$020C	$0180			CLRF	INDF
$020D	$1600			BSF	INDF, ___DB4
$020E	$1580			BSF	INDF, ___ENABLE
$020F	$1180			BCF	INDF, ___ENABLE
$0210	$0180			CLRF	INDF
$0211	$1580			BSF	INDF, ___ENABLE
$0212	$1180			BCF	INDF, ___ENABLE
$0213	$200C			CALL	_Delay_5500us
$0214	$0180			CLRF	INDF
$0215	$1580			BSF	INDF, ___ENABLE
$0216	$1180			BCF	INDF, ___ENABLE
$0217	$1600			BSF	INDF, ___DB4
$0218	$1580			BSF	INDF, ___ENABLE
$0219	$1180			BCF	INDF, ___ENABLE
$021A	$200C			CALL	_Delay_5500us
$021B	$0180			CLRF	INDF
$021C	$1580			BSF	INDF, ___ENABLE
$021D	$1180			BCF	INDF, ___ENABLE
$021E	$1600			BSF	INDF, ___DB4
$021F	$1680			BSF	INDF, ___DB5
$0220	$1700			BSF	INDF, ___DB6
$0221	$1780			BSF	INDF, ___DB7
$0222	$1580			BSF	INDF, ___ENABLE
$0223	$1180			BCF	INDF, ___ENABLE
$0224	$200C			CALL	_Delay_5500us
$0225	$3001			MOVLW	1
$0226	$00A2			MOVWF	LCD_cmd_status
$0227	$0008			RETURN
$0228	$	_rom_str2lcd:
;MonitorCaricaBatterie.c,73 :: 		void rom_str2lcd (unsigned char riga, unsigned char col ,char const *str_in_ROM)
;MonitorCaricaBatterie.c,75 :: 		unsigned short i = 0;
$0228	$1303			BCF	STATUS, RP1
$0229	$1283			BCF	STATUS, RP0
$022A	$01C8			CLRF	rom_str2lcd_i_L0, 1
;MonitorCaricaBatterie.c,78 :: 		do {
$022B	$	L_rom_str2lcd_2:
;MonitorCaricaBatterie.c,79 :: 		txt_msg[i] = str_in_ROM[i];
$022B	$0848			MOVF	rom_str2lcd_i_L0, 0
$022C	$3F49			ADDLW	rom_str2lcd_txt_msg_L0
$022D	$00F2			MOVWF	STACK_2
$022E	$0848			MOVF	rom_str2lcd_i_L0, 0
$022F	$0746			ADDWF	FARG_rom_str2lcd+2, 0
$0230	$00F0			MOVWF	STACK_0
$0231	$0847			MOVF	FARG_rom_str2lcd+3, 0
$0232	$1803			BTFSC	STATUS, C
$0233	$3F01			ADDLW	1
$0234	$00F1			MOVWF	STACK_0+1
$0235	$0870			MOVF	STACK_0, 0
$0236	$00A5			MOVWF	___DoICPLoAddr
$0237	$0871			MOVF	STACK_0+1, 0
$0238	$00A4			MOVWF	___DoICPHiAddr
$0239	$080A			MOVF	PCLATH, 0
$023A	$00A3			MOVWF	___DoICPSavePCLATH
$023B	$20A5			CALL	_____DoICP
$023C	$00F0			MOVWF	STACK_0
$023D	$0823			MOVF	___DoICPSavePCLATH, 0
$023E	$008A			MOVWF	PCLATH
$023F	$0872			MOVF	STACK_2, 0
$0240	$0084			MOVWF	FSR
$0241	$0870			MOVF	STACK_0, 0
$0242	$0080			MOVWF	INDF
;MonitorCaricaBatterie.c,80 :: 		} while (str_in_ROM[i++]);
$0243	$0848			MOVF	rom_str2lcd_i_L0, 0
$0244	$00F0			MOVWF	STACK_0
$0245	$0AC8			INCF	rom_str2lcd_i_L0, 1
$0246	$3000			MOVLW	0
$0247	$00F1			MOVWF	STACK_0+1
$0248	$0846			MOVF	FARG_rom_str2lcd+2, 0
$0249	$07F0			ADDWF	STACK_0, 1
$024A	$0847			MOVF	FARG_rom_str2lcd+3, 0
$024B	$1803			BTFSC	STATUS, C
$024C	$3F01			ADDLW	1
$024D	$07F1			ADDWF	STACK_0+1, 1
$024E	$0870			MOVF	STACK_0, 0
$024F	$00A5			MOVWF	___DoICPLoAddr
$0250	$0871			MOVF	STACK_0+1, 0
$0251	$00A4			MOVWF	___DoICPHiAddr
$0252	$080A			MOVF	PCLATH, 0
$0253	$00A3			MOVWF	___DoICPSavePCLATH
$0254	$20A5			CALL	_____DoICP
$0255	$00F0			MOVWF	STACK_0
$0256	$0823			MOVF	___DoICPSavePCLATH, 0
$0257	$008A			MOVWF	PCLATH
$0258	$0870			MOVF	STACK_0, 0
$0259	$1D03			BTFSS	STATUS, Z
$025A	$2A2B			GOTO	L_rom_str2lcd_2
$025B	$	L_rom_str2lcd_3:
;MonitorCaricaBatterie.c,82 :: 		LCD_Out(riga,col,txt_msg);
$025B	$0844			MOVF	FARG_rom_str2lcd+0, 0
$025C	$00D9			MOVWF	FARG_LCD_Out+0
$025D	$0845			MOVF	FARG_rom_str2lcd+1, 0
$025E	$00DA			MOVWF	FARG_LCD_Out+1
$025F	$3049			MOVLW	rom_str2lcd_txt_msg_L0
$0260	$00DB			MOVWF	FARG_LCD_Out+2
$0261	$2062			CALL	_LCD_Out
;MonitorCaricaBatterie.c,83 :: 		}
$0262	$0008			RETURN
$0263	$	table___txt_avvio1:
;MonitorCaricaBatterie.c,46 :: 		const char txt_avvio1[] = "Monitor Batteria";
$0263	$344D			RETLW	77
$0264	$346F			RETLW	111
$0265	$346E			RETLW	110
$0266	$3469			RETLW	105
$0267	$3474			RETLW	116
$0268	$346F			RETLW	111
$0269	$3472			RETLW	114
$026A	$3420			RETLW	32
$026B	$3442			RETLW	66
$026C	$3461			RETLW	97
$026D	$3474			RETLW	116
$026E	$3474			RETLW	116
$026F	$3465			RETLW	101
$0270	$3472			RETLW	114
$0271	$3469			RETLW	105
$0272	$3461			RETLW	97
$0273	$3400			RETLW	0
$0274	$0008			RETURN
$0275	$	table___txt_avvio2:
;MonitorCaricaBatterie.c,47 :: 		const char txt_avvio2[] = "CSTech  Set 2007";
$0275	$3443			RETLW	67
$0276	$3453			RETLW	83
$0277	$3454			RETLW	84
$0278	$3465			RETLW	101
$0279	$3463			RETLW	99
$027A	$3468			RETLW	104
$027B	$3420			RETLW	32
$027C	$3420			RETLW	32
$027D	$3453			RETLW	83
$027E	$3465			RETLW	101
$027F	$3474			RETLW	116
$0280	$3420			RETLW	32
$0281	$3432			RETLW	50
$0282	$3430			RETLW	48
$0283	$3430			RETLW	48
$0284	$3437			RETLW	55
$0285	$3400			RETLW	0
$0286	$0008			RETURN
$0287	$	table___txt_avvio3:
;MonitorCaricaBatterie.c,48 :: 		const char txt_avvio3[] = "Firmware  v 2.06";
$0287	$3446			RETLW	70
$0288	$3469			RETLW	105
$0289	$3472			RETLW	114
$028A	$346D			RETLW	109
$028B	$3477			RETLW	119
$028C	$3461			RETLW	97
$028D	$3472			RETLW	114
$028E	$3465			RETLW	101
$028F	$3420			RETLW	32
$0290	$3420			RETLW	32
$0291	$3476			RETLW	118
$0292	$3420			RETLW	32
$0293	$3432			RETLW	50
$0294	$342E			RETLW	46
$0295	$3430			RETLW	48
$0296	$3436			RETLW	54
$0297	$3400			RETLW	0
$0298	$0008			RETURN
$0299	$	table___txt_avvio4:
;MonitorCaricaBatterie.c,49 :: 		const char txt_avvio4[] = "________________";
$0299	$345F			RETLW	95
$029A	$345F			RETLW	95
$029B	$345F			RETLW	95
$029C	$345F			RETLW	95
$029D	$345F			RETLW	95
$029E	$345F			RETLW	95
$029F	$345F			RETLW	95
$02A0	$345F			RETLW	95
$02A1	$345F			RETLW	95
$02A2	$345F			RETLW	95
$02A3	$345F			RETLW	95
$02A4	$345F			RETLW	95
$02A5	$345F			RETLW	95
$02A6	$345F			RETLW	95
$02A7	$345F			RETLW	95
$02A8	$345F			RETLW	95
$02A9	$3400			RETLW	0
$02AA	$0008			RETURN
$02AB	$	_Delay_22us:
;delays.c,10 :: 		void Delay_22us() {
;delays.c,11 :: 		Delay_us(22);
$02AB	$3024			MOVLW	36
$02AC	$1303			BCF	STATUS, RP1
$02AD	$1283			BCF	STATUS, RP0
$02AE	$00FA			MOVWF	STACK_10
$02AF	$0BFA			DECFSZ	STACK_10, F
$02B0	$2AAF			GOTO	$-1
$02B1	$0000			NOP
;delays.c,12 :: 		}
$02B2	$0008			RETURN
$02B3	$	_Usart_Write:
$02B3	$	L_Usart_Write_3:
$02B3	$3000			MOVLW	0
$02B4	$1303			BCF	STATUS, RP1
$02B5	$1683			BSF	STATUS, RP0
$02B6	$1898			BTFSC	TXSTA, 1
$02B7	$3001			MOVLW	1
$02B8	$00F1			MOVWF	STACK_1
$02B9	$0871			MOVF	STACK_1, 0
$02BA	$3A00			XORLW	0
$02BB	$1D03			BTFSS	STATUS, Z
$02BC	$2ABF			GOTO	L_Usart_Write_4
$02BD	$0000			NOP
$02BE	$2AB3			GOTO	L_Usart_Write_3
$02BF	$	L_Usart_Write_4:
$02BF	$1283			BCF	STATUS, RP0
$02C0	$0844			MOVF	FARG_Usart_Write+0, 0
$02C1	$0099			MOVWF	TXREG
$02C2	$0008			RETURN
$02C3	$	_Lcd_Chr:
$02C3	$2AD5			GOTO	L_Lcd_Chr_8
$02C4	$	L_Lcd_Chr_10:
$02C4	$3080			MOVLW	128
$02C5	$1303			BCF	STATUS, RP1
$02C6	$1283			BCF	STATUS, RP0
$02C7	$00C4			MOVWF	FARG_Lcd_Chr+0
$02C8	$2AE8			GOTO	L_Lcd_Chr_9
$02C9	$	L_Lcd_Chr_11:
$02C9	$30C0			MOVLW	192
$02CA	$00C4			MOVWF	FARG_Lcd_Chr+0
$02CB	$2AE8			GOTO	L_Lcd_Chr_9
$02CC	$	L_Lcd_Chr_12:
$02CC	$3094			MOVLW	148
$02CD	$00C4			MOVWF	FARG_Lcd_Chr+0
$02CE	$2AE8			GOTO	L_Lcd_Chr_9
$02CF	$	L_Lcd_Chr_13:
$02CF	$30D4			MOVLW	212
$02D0	$00C4			MOVWF	FARG_Lcd_Chr+0
$02D1	$2AE8			GOTO	L_Lcd_Chr_9
$02D2	$	L_Lcd_Chr_14:
$02D2	$3080			MOVLW	128
$02D3	$00C4			MOVWF	FARG_Lcd_Chr+0
$02D4	$2AE8			GOTO	L_Lcd_Chr_9
$02D5	$	L_Lcd_Chr_8:
$02D5	$1303			BCF	STATUS, RP1
$02D6	$1283			BCF	STATUS, RP0
$02D7	$0844			MOVF	FARG_Lcd_Chr+0, 0
$02D8	$3A01			XORLW	1
$02D9	$1903			BTFSC	STATUS, Z
$02DA	$2AC4			GOTO	L_Lcd_Chr_10
$02DB	$0844			MOVF	FARG_Lcd_Chr+0, 0
$02DC	$3A02			XORLW	2
$02DD	$1903			BTFSC	STATUS, Z
$02DE	$2AC9			GOTO	L_Lcd_Chr_11
$02DF	$0844			MOVF	FARG_Lcd_Chr+0, 0
$02E0	$3A03			XORLW	3
$02E1	$1903			BTFSC	STATUS, Z
$02E2	$2ACC			GOTO	L_Lcd_Chr_12
$02E3	$0844			MOVF	FARG_Lcd_Chr+0, 0
$02E4	$3A04			XORLW	4
$02E5	$1903			BTFSC	STATUS, Z
$02E6	$2ACF			GOTO	L_Lcd_Chr_13
$02E7	$2AD2			GOTO	L_Lcd_Chr_14
$02E8	$	L_Lcd_Chr_9:
$02E8	$0345			DECF	FARG_Lcd_Chr+1, 0
$02E9	$00F0			MOVWF	STACK_0
$02EA	$0844			MOVF	FARG_Lcd_Chr+0, 0
$02EB	$07F0			ADDWF	STACK_0, 1
$02EC	$0870			MOVF	STACK_0, 0
$02ED	$00C4			MOVWF	FARG_Lcd_Chr+0
$02EE	$3001			MOVLW	1
$02EF	$00A2			MOVWF	LCD_cmd_status
$02F0	$0870			MOVF	STACK_0, 0
$02F1	$00DE			MOVWF	FARG_Lcd_Cmd+0
$02F2	$2024			CALL	_Lcd_Cmd
$02F3	$01A2			CLRF	LCD_cmd_status, 1
$02F4	$0846			MOVF	FARG_Lcd_Chr+2, 0
$02F5	$00DE			MOVWF	FARG_Lcd_Cmd+0
$02F6	$2024			CALL	_Lcd_Cmd
$02F7	$3001			MOVLW	1
$02F8	$00A2			MOVWF	LCD_cmd_status
$02F9	$0008			RETURN
$02FA	$	_Mul_32x32_U:
$02FA	$1303			BCF	STATUS, RP1
$02FB	$1283			BCF	STATUS, RP0
$02FC	$3022			MOVLW	34
$02FD	$00FC			MOVWF	STACK_12
$02FE	$01F8			CLRF	STACK_8
$02FF	$01F9			CLRF	STACK_9
$0300	$01FA			CLRF	STACK_10
$0301	$01FB			CLRF	STACK_11
$0302	$	_NEXT:
$0302	$03FC			DECF	STACK_12, F
$0303	$1903			BTFSC	STATUS, Z
$0304	$2B30			GOTO	_EXIT2
$0305	$1003			BCF	STATUS, C
$0306	$	_LOOP:
$0306	$0CFB			RRF	STACK_11, F
$0307	$0CFA			RRF	STACK_10, F
$0308	$0CF9			RRF	STACK_9, F
$0309	$0CF8			RRF	STACK_8, F
$030A	$0CF3			RRF	STACK_3, F
$030B	$0CF2			RRF	STACK_2, F
$030C	$0CF1			RRF	STACK_1, F
$030D	$0CF0			RRF	STACK_0, F
$030E	$1C03			BTFSS	STATUS, C
$030F	$2B02			GOTO	_NEXT
$0310	$03FC			DECF	STACK_12, F
$0311	$1903			BTFSC	STATUS, Z
$0312	$2B22			GOTO	_EXIT1
$0313	$0874			MOVF	STACK_4, W
$0314	$07F8			ADDWF	STACK_8, F
$0315	$0875			MOVF	STACK_5, W
$0316	$1803			BTFSC	STATUS, C
$0317	$0F75			INCFSZ	STACK_5, W
$0318	$07F9			ADDWF	STACK_9, F
$0319	$0876			MOVF	STACK_6, W
$031A	$1803			BTFSC	STATUS, C
$031B	$0F76			INCFSZ	STACK_6, W
$031C	$07FA			ADDWF	STACK_10, F
$031D	$0877			MOVF	STACK_7, W
$031E	$1803			BTFSC	STATUS, C
$031F	$0F77			INCFSZ	STACK_7, W
$0320	$07FB			ADDWF	STACK_11, F
$0321	$2B06			GOTO	_LOOP
$0322	$	_EXIT1:
$0322	$0874			MOVF	STACK_4, W
$0323	$07F8			ADDWF	STACK_8, F
$0324	$0875			MOVF	STACK_5, W
$0325	$1803			BTFSC	STATUS, C
$0326	$0F75			INCFSZ	STACK_5, W
$0327	$07F9			ADDWF	STACK_9, F
$0328	$0876			MOVF	STACK_6, W
$0329	$1803			BTFSC	STATUS, C
$032A	$0F76			INCFSZ	STACK_6, W
$032B	$07FA			ADDWF	STACK_10, F
$032C	$0877			MOVF	STACK_7, W
$032D	$1803			BTFSC	STATUS, C
$032E	$0F77			INCFSZ	STACK_7, W
$032F	$07FB			ADDWF	STACK_11, F
$0330	$	_EXIT2:
$0330	$0008			RETURN
$0331	$	_Div_32x32_S:
$0331	$1303			BCF	STATUS, RP1
$0332	$1283			BCF	STATUS, RP0
$0333	$	FXD3232S:
$0333	$01FC			CLRF	STACK_12
$0334	$1BF7			BTFSC	STACK_7, 7
$0335	$0AFC			INCF	STACK_12, F
$0336	$01FD			CLRF	STACK_13
$0337	$01FB			CLRF	STACK_11
$0338	$01FA			CLRF	STACK_10
$0339	$01F9			CLRF	STACK_9
$033A	$01F8			CLRF	STACK_8
$033B	$0873			MOVF	STACK_3, W
$033C	$0472			IORWF	STACK_2, W
$033D	$0471			IORWF	STACK_1, W
$033E	$0470			IORWF	STACK_0, W
$033F	$1903			BTFSC	STATUS, Z
$0340	$2BC5			GOTO	END_ALL
$0341	$0873			MOVF	STACK_3, W
$0342	$0677			XORWF	STACK_7, W
$0343	$00A0			MOVWF	___math_tempb
$0344	$1BA0			BTFSC	___math_tempb, 7
$0345	$09FD			COMF	STACK_13, F
$0346	$1FF7			BTFSS	STACK_7, 7
$0347	$2B53			GOTO	CA3232S
$0348	$09F4			COMF	STACK_4, F
$0349	$09F5			COMF	STACK_5, F
$034A	$09F6			COMF	STACK_6, F
$034B	$09F7			COMF	STACK_7, F
$034C	$0AF4			INCF	STACK_4, F
$034D	$1903			BTFSC	STATUS, Z
$034E	$0AF5			INCF	STACK_5, F
$034F	$1903			BTFSC	STATUS, Z
$0350	$0AF6			INCF	STACK_6, F
$0351	$1903			BTFSC	STATUS, Z
$0352	$0AF7			INCF	STACK_7, F
$0353	$	CA3232S:
$0353	$1FF3			BTFSS	STACK_3, 7
$0354	$2B60			GOTO	C3232SX
$0355	$09F0			COMF	STACK_0, F
$0356	$09F1			COMF	STACK_1, F
$0357	$09F2			COMF	STACK_2, F
$0358	$09F3			COMF	STACK_3, F
$0359	$0AF0			INCF	STACK_0, F
$035A	$1903			BTFSC	STATUS, Z
$035B	$0AF1			INCF	STACK_1, F
$035C	$1903			BTFSC	STATUS, Z
$035D	$0AF2			INCF	STACK_2, F
$035E	$1903			BTFSC	STATUS, Z
$035F	$0AF3			INCF	STACK_3, F
$0360	$	C3232SX:
$0360	$0873			MOVF	STACK_3, W
$0361	$0477			IORWF	STACK_7, W
$0362	$00A0			MOVWF	___math_tempb
$0363	$1BA0			BTFSC	___math_tempb, 7
$0364	$2B81			GOTO	C3232SX1
$0365	$	C3232S:
$0365	$20AC			CALL	_SDIV3232L
$0366	$	C3232S2:
$0366	$1BFC			BTFSC	STACK_12, 7
$0367	$2B9E			GOTO	C3232SX4
$0368	$	C3232SOK:
$0368	$1FFD			BTFSS	STACK_13, 7
$0369	$2BC5			GOTO	END_ALL
$036A	$09F0			COMF	STACK_0, F
$036B	$09F1			COMF	STACK_1, F
$036C	$09F2			COMF	STACK_2, F
$036D	$09F3			COMF	STACK_3, F
$036E	$0AF0			INCF	STACK_0, F
$036F	$1903			BTFSC	STATUS, Z
$0370	$0AF1			INCF	STACK_1, F
$0371	$1903			BTFSC	STATUS, Z
$0372	$0AF2			INCF	STACK_2, F
$0373	$1903			BTFSC	STATUS, Z
$0374	$0AF3			INCF	STACK_3, F
$0375	$09F8			COMF	STACK_8, F
$0376	$09F9			COMF	STACK_9, F
$0377	$09FA			COMF	STACK_10, F
$0378	$09FB			COMF	STACK_11, F
$0379	$0AF8			INCF	STACK_8, F
$037A	$1903			BTFSC	STATUS, Z
$037B	$0AF9			INCF	STACK_9, F
$037C	$1903			BTFSC	STATUS, Z
$037D	$0AFA			INCF	STACK_10, F
$037E	$1903			BTFSC	STATUS, Z
$037F	$0AFB			INCF	STACK_11, F
$0380	$2BC5			GOTO	END_ALL
$0381	$	C3232SX1:
$0381	$1FF7			BTFSS	STACK_7, 7
$0382	$2B98			GOTO	C3232SX3
$0383	$1BF3			BTFSC	STACK_3, 7
$0384	$2B92			GOTO	C3232SX2
$0385	$0873			MOVF	STACK_3, W
$0386	$00FB			MOVWF	STACK_11
$0387	$0872			MOVF	STACK_2, W
$0388	$00FA			MOVWF	STACK_10
$0389	$0871			MOVF	STACK_1, W
$038A	$00F9			MOVWF	STACK_9
$038B	$0870			MOVF	STACK_0, W
$038C	$00F8			MOVWF	STACK_8
$038D	$01F3			CLRF	STACK_3
$038E	$01F2			CLRF	STACK_2
$038F	$01F1			CLRF	STACK_1
$0390	$01F0			CLRF	STACK_0
$0391	$2B68			GOTO	C3232SOK
$0392	$	C3232SX2:
$0392	$01F3			CLRF	STACK_3
$0393	$01F2			CLRF	STACK_2
$0394	$01F1			CLRF	STACK_1
$0395	$01F0			CLRF	STACK_0
$0396	$0AF0			INCF	STACK_0, F
$0397	$3400			RETLW	0x00
$0398	$	C3232SX3:
$0398	$09F3			COMF	STACK_3, F
$0399	$09F2			COMF	STACK_2, F
$039A	$09F1			COMF	STACK_1, F
$039B	$09F0			COMF	STACK_0, F
$039C	$17FC			BSF	STACK_12, 7
$039D	$2B65			GOTO	C3232S
$039E	$	C3232SX4:
$039E	$0AF8			INCF	STACK_8, F
$039F	$1903			BTFSC	STATUS, Z
$03A0	$0AF9			INCF	STACK_9, F
$03A1	$1903			BTFSC	STATUS, Z
$03A2	$0AFA			INCF	STACK_10, F
$03A3	$1903			BTFSC	STATUS, Z
$03A4	$0AFB			INCF	STACK_11, F
$03A5	$0874			MOVF	STACK_4, W
$03A6	$0278			SUBWF	STACK_8, W
$03A7	$1D03			BTFSS	STATUS, Z
$03A8	$2B68			GOTO	C3232SOK
$03A9	$0875			MOVF	STACK_5, W
$03AA	$0279			SUBWF	STACK_9, W
$03AB	$1D03			BTFSS	STATUS, Z
$03AC	$2B68			GOTO	C3232SOK
$03AD	$0876			MOVF	STACK_6, W
$03AE	$027A			SUBWF	STACK_10, W
$03AF	$1D03			BTFSS	STATUS, Z
$03B0	$2B68			GOTO	C3232SOK
$03B1	$0877			MOVF	STACK_7, W
$03B2	$027B			SUBWF	STACK_11, W
$03B3	$1D03			BTFSS	STATUS, Z
$03B4	$2B68			GOTO	C3232SOK
$03B5	$01FB			CLRF	STACK_11
$03B6	$01FA			CLRF	STACK_10
$03B7	$01F9			CLRF	STACK_9
$03B8	$01F8			CLRF	STACK_8
$03B9	$0AF0			INCF	STACK_0, F
$03BA	$1903			BTFSC	STATUS, Z
$03BB	$0AF1			INCF	STACK_1, F
$03BC	$1903			BTFSC	STATUS, Z
$03BD	$0AF2			INCF	STACK_2, F
$03BE	$1903			BTFSC	STATUS, Z
$03BF	$0AF3			INCF	STACK_3, F
$03C0	$1FF3			BTFSS	STACK_3, 7
$03C1	$2B68			GOTO	C3232SOK
$03C2	$01A0			CLRF	___math_tempb
$03C3	$1620			BSF	___math_tempb, 4
$03C4	$34FF			RETLW	0xFF
$03C5	$	END_ALL:
$03C5	$01A0			CLRF	___math_tempb
$03C6	$1C7C			BTFSS	STACK_12, 0
$03C7	$2BC9			GOTO	avoid_comfrem
$03C8	$21DA			CALL	_COMFREM
$03C9	$	avoid_comfrem:
$03C9	$3F00			ADDLW	0x00
$03CA	$0008			RETURN
$03CB	$	_init_MCU:
;MonitorCaricaBatterie.c,87 :: 		void init_MCU (void)
;MonitorCaricaBatterie.c,89 :: 		INTCON = 0;  // Disabilita gli interrupt
$03CB	$018B			CLRF	INTCON, 1
;MonitorCaricaBatterie.c,91 :: 		ADCON1 = 0b11000100; // AN0 AN1 AN3 sono ingressi analogici
$03CC	$30C4			MOVLW	196
$03CD	$1303			BCF	STATUS, RP1
$03CE	$1683			BSF	STATUS, RP0
$03CF	$009F			MOVWF	ADCON1
;MonitorCaricaBatterie.c,94 :: 		TRISA = 0b11101111; //  Setto la PORTA
$03D0	$30EF			MOVLW	239
$03D1	$0085			MOVWF	TRISA
;MonitorCaricaBatterie.c,95 :: 		TRISB = 0x00;  //  Setto la PORTB come output
$03D2	$0186			CLRF	TRISB, 1
;MonitorCaricaBatterie.c,96 :: 		TRISC = 0x00;  //  Setto la PORTC come output
$03D3	$0187			CLRF	TRISC, 1
;MonitorCaricaBatterie.c,97 :: 		}
$03D4	$0008			RETURN
$03D5	$	_lcd_set_light:
;MonitorCaricaBatterie.c,59 :: 		void lcd_set_light(char status)
;MonitorCaricaBatterie.c,61 :: 		intCont = 1;
$03D5	$3001			MOVLW	1
$03D6	$1303			BCF	STATUS, RP1
$03D7	$1283			BCF	STATUS, RP0
$03D8	$00A6			MOVWF	_intCont
$03D9	$3000			MOVLW	0
$03DA	$00A7			MOVWF	_intCont+1
;MonitorCaricaBatterie.c,62 :: 		if (status == LCD_LIGHT_OFF) {
$03DB	$0837			MOVF	FARG_lcd_set_light+0, 0
$03DC	$3A00			XORLW	0
$03DD	$1D03			BTFSS	STATUS, Z
$03DE	$2BE2			GOTO	L_lcd_set_light_0
;MonitorCaricaBatterie.c,63 :: 		PORTA.F4 = LCD_LIGHT_OFF;
$03DF	$1205			BCF	PORTA, 4
;MonitorCaricaBatterie.c,64 :: 		lcd_light_status = LCD_LIGHT_OFF;
$03E0	$01A8			CLRF	_lcd_light_status, 1
;MonitorCaricaBatterie.c,65 :: 		} else {
$03E1	$2BE5			GOTO	L_lcd_set_light_1
$03E2	$	L_lcd_set_light_0:
;MonitorCaricaBatterie.c,66 :: 		PORTA.F4 = LCD_LIGHT_ON;
$03E2	$1605			BSF	PORTA, 4
;MonitorCaricaBatterie.c,67 :: 		lcd_light_status = LCD_LIGHT_ON;
$03E3	$3001			MOVLW	1
$03E4	$00A8			MOVWF	_lcd_light_status
;MonitorCaricaBatterie.c,68 :: 		}
$03E5	$	L_lcd_set_light_1:
;MonitorCaricaBatterie.c,69 :: 		}
$03E5	$0008			RETURN
$03E6	$	_start_LCD:
;MonitorCaricaBatterie.c,101 :: 		void start_LCD()
;MonitorCaricaBatterie.c,103 :: 		Lcd_Init(&PORTB);        // Inizializza l'LCD sulla PORTD
$03E6	$3006			MOVLW	PORTB
$03E7	$1303			BCF	STATUS, RP1
$03E8	$1283			BCF	STATUS, RP0
$03E9	$00C4			MOVWF	FARG_Lcd_Init+0
$03EA	$21E8			CALL	_Lcd_Init
;MonitorCaricaBatterie.c,104 :: 		Delay_ms(5);
$03EB	$3021			MOVLW	33
$03EC	$00FB			MOVWF	STACK_11
$03ED	$30FF			MOVLW	255
$03EE	$00FA			MOVWF	STACK_10
$03EF	$0BFB			DECFSZ	STACK_11, F
$03F0	$2BF2			GOTO	$+2
$03F1	$2BF5			GOTO	$+4
$03F2	$0BFA			DECFSZ	STACK_10, F
$03F3	$2BF2			GOTO	$-1
$03F4	$2BEF			GOTO	$-5
$03F5	$3060			MOVLW	96
$03F6	$00FA			MOVWF	STACK_10
$03F7	$0BFA			DECFSZ	STACK_10, F
$03F8	$2BF7			GOTO	$-1
$03F9	$0000			NOP
;MonitorCaricaBatterie.c,105 :: 		Lcd_Cmd(LCD_CLEAR);      // Clear display
$03FA	$3001			MOVLW	1
$03FB	$00DE			MOVWF	FARG_Lcd_Cmd+0
$03FC	$2024			CALL	_Lcd_Cmd
;MonitorCaricaBatterie.c,106 :: 		Delay_ms(5);
$03FD	$3021			MOVLW	33
$03FE	$00FB			MOVWF	STACK_11
$03FF	$30FF			MOVLW	255
$0400	$00FA			MOVWF	STACK_10
$0401	$0BFB			DECFSZ	STACK_11, F
$0402	$2C04			GOTO	$+2
$0403	$2C07			GOTO	$+4
$0404	$0BFA			DECFSZ	STACK_10, F
$0405	$2C04			GOTO	$-1
$0406	$2C01			GOTO	$-5
$0407	$3060			MOVLW	96
$0408	$00FA			MOVWF	STACK_10
$0409	$0BFA			DECFSZ	STACK_10, F
$040A	$2C09			GOTO	$-1
$040B	$0000			NOP
;MonitorCaricaBatterie.c,107 :: 		Lcd_Cmd(LCD_CURSOR_OFF); // Disattiva il cursore
$040C	$300C			MOVLW	12
$040D	$00DE			MOVWF	FARG_Lcd_Cmd+0
$040E	$2024			CALL	_Lcd_Cmd
;MonitorCaricaBatterie.c,108 :: 		Delay_ms(250);
$040F	$3007			MOVLW	7
$0410	$00FC			MOVWF	STACK_12
$0411	$30FF			MOVLW	255
$0412	$00FB			MOVWF	STACK_11
$0413	$30FF			MOVLW	255
$0414	$00FA			MOVWF	STACK_10
$0415	$0BFC			DECFSZ	STACK_12, F
$0416	$2C18			GOTO	$+2
$0417	$2C1F			GOTO	$+8
$0418	$0BFB			DECFSZ	STACK_11, F
$0419	$2C1B			GOTO	$+2
$041A	$2C1E			GOTO	$+4
$041B	$0BFA			DECFSZ	STACK_10, F
$041C	$2C1B			GOTO	$-1
$041D	$2C18			GOTO	$-5
$041E	$2C15			GOTO	$-9
$041F	$3060			MOVLW	96
$0420	$00FB			MOVWF	STACK_11
$0421	$30FF			MOVLW	255
$0422	$00FA			MOVWF	STACK_10
$0423	$0BFB			DECFSZ	STACK_11, F
$0424	$2C26			GOTO	$+2
$0425	$2C29			GOTO	$+4
$0426	$0BFA			DECFSZ	STACK_10, F
$0427	$2C26			GOTO	$-1
$0428	$2C23			GOTO	$-5
$0429	$3013			MOVLW	19
$042A	$00FA			MOVWF	STACK_10
$042B	$0BFA			DECFSZ	STACK_10, F
$042C	$2C2B			GOTO	$-1
$042D	$0000			NOP
$042E	$0000			NOP
;MonitorCaricaBatterie.c,109 :: 		}
$042F	$0008			RETURN
$0430	$	_Display_Info:
;MonitorCaricaBatterie.c,183 :: 		void Display_Info(void){
;MonitorCaricaBatterie.c,184 :: 		rom_str2lcd(1,1,txt_avvio1);
$0430	$3001			MOVLW	1
$0431	$1303			BCF	STATUS, RP1
$0432	$1283			BCF	STATUS, RP0
$0433	$00C4			MOVWF	FARG_rom_str2lcd+0
$0434	$3001			MOVLW	1
$0435	$00C5			MOVWF	FARG_rom_str2lcd+1
$0436	$3063			MOVLW	#_txt_avvio1
$0437	$00C6			MOVWF	FARG_rom_str2lcd+2
$0438	$3002			MOVLW	@#_txt_avvio1
$0439	$00C7			MOVWF	FARG_rom_str2lcd+3
$043A	$2228			CALL	_rom_str2lcd
;MonitorCaricaBatterie.c,185 :: 		rom_str2lcd(2,1,txt_avvio2);
$043B	$3002			MOVLW	2
$043C	$00C4			MOVWF	FARG_rom_str2lcd+0
$043D	$3001			MOVLW	1
$043E	$00C5			MOVWF	FARG_rom_str2lcd+1
$043F	$3075			MOVLW	#_txt_avvio2
$0440	$00C6			MOVWF	FARG_rom_str2lcd+2
$0441	$3002			MOVLW	@#_txt_avvio2
$0442	$00C7			MOVWF	FARG_rom_str2lcd+3
$0443	$2228			CALL	_rom_str2lcd
;MonitorCaricaBatterie.c,186 :: 		Delay_ms(2000);
$0444	$3033			MOVLW	51
$0445	$00FC			MOVWF	STACK_12
$0446	$30FF			MOVLW	255
$0447	$00FB			MOVWF	STACK_11
$0448	$30FF			MOVLW	255
$0449	$00FA			MOVWF	STACK_10
$044A	$0BFC			DECFSZ	STACK_12, F
$044B	$2C4D			GOTO	$+2
$044C	$2C54			GOTO	$+8
$044D	$0BFB			DECFSZ	STACK_11, F
$044E	$2C50			GOTO	$+2
$044F	$2C53			GOTO	$+4
$0450	$0BFA			DECFSZ	STACK_10, F
$0451	$2C50			GOTO	$-1
$0452	$2C4D			GOTO	$-5
$0453	$2C4A			GOTO	$-9
$0454	$30FD			MOVLW	253
$0455	$00FB			MOVWF	STACK_11
$0456	$30FF			MOVLW	255
$0457	$00FA			MOVWF	STACK_10
$0458	$0BFB			DECFSZ	STACK_11, F
$0459	$2C5B			GOTO	$+2
$045A	$2C5E			GOTO	$+4
$045B	$0BFA			DECFSZ	STACK_10, F
$045C	$2C5B			GOTO	$-1
$045D	$2C58			GOTO	$-5
$045E	$30B5			MOVLW	181
$045F	$00FA			MOVWF	STACK_10
$0460	$0BFA			DECFSZ	STACK_10, F
$0461	$2C60			GOTO	$-1
$0462	$0000			NOP
;MonitorCaricaBatterie.c,187 :: 		rom_str2lcd(1,1,txt_avvio3);
$0463	$3001			MOVLW	1
$0464	$00C4			MOVWF	FARG_rom_str2lcd+0
$0465	$3001			MOVLW	1
$0466	$00C5			MOVWF	FARG_rom_str2lcd+1
$0467	$3087			MOVLW	#_txt_avvio3
$0468	$00C6			MOVWF	FARG_rom_str2lcd+2
$0469	$3002			MOVLW	@#_txt_avvio3
$046A	$00C7			MOVWF	FARG_rom_str2lcd+3
$046B	$2228			CALL	_rom_str2lcd
;MonitorCaricaBatterie.c,188 :: 		rom_str2lcd(2,1,txt_avvio4);
$046C	$3002			MOVLW	2
$046D	$00C4			MOVWF	FARG_rom_str2lcd+0
$046E	$3001			MOVLW	1
$046F	$00C5			MOVWF	FARG_rom_str2lcd+1
$0470	$3099			MOVLW	#_txt_avvio4
$0471	$00C6			MOVWF	FARG_rom_str2lcd+2
$0472	$3002			MOVLW	@#_txt_avvio4
$0473	$00C7			MOVWF	FARG_rom_str2lcd+3
$0474	$2228			CALL	_rom_str2lcd
;MonitorCaricaBatterie.c,189 :: 		Delay_ms(2000);
$0475	$3033			MOVLW	51
$0476	$00FC			MOVWF	STACK_12
$0477	$30FF			MOVLW	255
$0478	$00FB			MOVWF	STACK_11
$0479	$30FF			MOVLW	255
$047A	$00FA			MOVWF	STACK_10
$047B	$0BFC			DECFSZ	STACK_12, F
$047C	$2C7E			GOTO	$+2
$047D	$2C85			GOTO	$+8
$047E	$0BFB			DECFSZ	STACK_11, F
$047F	$2C81			GOTO	$+2
$0480	$2C84			GOTO	$+4
$0481	$0BFA			DECFSZ	STACK_10, F
$0482	$2C81			GOTO	$-1
$0483	$2C7E			GOTO	$-5
$0484	$2C7B			GOTO	$-9
$0485	$30FD			MOVLW	253
$0486	$00FB			MOVWF	STACK_11
$0487	$30FF			MOVLW	255
$0488	$00FA			MOVWF	STACK_10
$0489	$0BFB			DECFSZ	STACK_11, F
$048A	$2C8C			GOTO	$+2
$048B	$2C8F			GOTO	$+4
$048C	$0BFA			DECFSZ	STACK_10, F
$048D	$2C8C			GOTO	$-1
$048E	$2C89			GOTO	$-5
$048F	$30B5			MOVLW	181
$0490	$00FA			MOVWF	STACK_10
$0491	$0BFA			DECFSZ	STACK_10, F
$0492	$2C91			GOTO	$-1
$0493	$0000			NOP
;MonitorCaricaBatterie.c,190 :: 		Lcd_Cmd(Lcd_CLEAR);  // Clear display
$0494	$3001			MOVLW	1
$0495	$00DE			MOVWF	FARG_Lcd_Cmd+0
$0496	$2024			CALL	_Lcd_Cmd
;MonitorCaricaBatterie.c,191 :: 		}
$0497	$0008			RETURN
$0498	$	table___txt_riga1:
;MonitorCaricaBatterie.c,51 :: 		const char txt_riga1[]  = "AUDI    :   .  V";
$0498	$3441			RETLW	65
$0499	$3455			RETLW	85
$049A	$3444			RETLW	68
$049B	$3449			RETLW	73
$049C	$3420			RETLW	32
$049D	$3420			RETLW	32
$049E	$3420			RETLW	32
$049F	$3420			RETLW	32
$04A0	$343A			RETLW	58
$04A1	$3420			RETLW	32
$04A2	$3420			RETLW	32
$04A3	$3420			RETLW	32
$04A4	$342E			RETLW	46
$04A5	$3420			RETLW	32
$04A6	$3420			RETLW	32
$04A7	$3456			RETLW	86
$04A8	$3400			RETLW	0
$04A9	$0008			RETURN
$04AA	$	table___txt_riga2:
;MonitorCaricaBatterie.c,52 :: 		const char txt_riga2[]  = "MERCEDES:   .  V";
$04AA	$344D			RETLW	77
$04AB	$3445			RETLW	69
$04AC	$3452			RETLW	82
$04AD	$3443			RETLW	67
$04AE	$3445			RETLW	69
$04AF	$3444			RETLW	68
$04B0	$3445			RETLW	69
$04B1	$3453			RETLW	83
$04B2	$343A			RETLW	58
$04B3	$3420			RETLW	32
$04B4	$3420			RETLW	32
$04B5	$3420			RETLW	32
$04B6	$342E			RETLW	46
$04B7	$3420			RETLW	32
$04B8	$3420			RETLW	32
$04B9	$3456			RETLW	86
$04BA	$3400			RETLW	0
$04BB	$0008			RETURN
$04BC	$	_Adc_Read:
$04BC	$1303			BCF	STATUS, RP1
$04BD	$1283			BCF	STATUS, RP0
$04BE	$019F			CLRF	ADCON0, 1
$04BF	$30C0			MOVLW	192
$04C0	$049F			IORWF	ADCON0, 1
$04C1	$1683			BSF	STATUS, RP0
$04C2	$171F			BSF	ADCON1, 6
$04C3	$179F			BSF	ADCON1, 7
$04C4	$1283			BCF	STATUS, RP0
$04C5	$0837			MOVF	FARG_Adc_Read+0, 0
$04C6	$00F0			MOVWF	STACK_0
$04C7	$0DF0			RLF	STACK_0, 1
$04C8	$1070			BCF	STACK_0, 0
$04C9	$0DF0			RLF	STACK_0, 1
$04CA	$1070			BCF	STACK_0, 0
$04CB	$0DF0			RLF	STACK_0, 1
$04CC	$1070			BCF	STACK_0, 0
$04CD	$0870			MOVF	STACK_0, 0
$04CE	$049F			IORWF	ADCON0, 1
$04CF	$141F			BSF	ADCON0, 0
$04D0	$22AB			CALL	_Delay_22us
$04D1	$151F			BSF	ADCON0, 2
$04D2	$	L_Adc_Read_0:
$04D2	$1D1F			BTFSS	ADCON0, 2
$04D3	$2CD6			GOTO	L_Adc_Read_1
$04D4	$0000			NOP
$04D5	$2CD2			GOTO	L_Adc_Read_0
$04D6	$	L_Adc_Read_1:
$04D6	$101F			BCF	ADCON0, 0
$04D7	$3008			MOVLW	8
$04D8	$00F2			MOVWF	STACK_2
$04D9	$081E			MOVF	ADRESH, 0
$04DA	$00F0			MOVWF	STACK_0
$04DB	$01F1			CLRF	STACK_0+1
$04DC	$0872			MOVF	STACK_2, 0
$04DD	$	L_Adc_Read_2:
$04DD	$1903			BTFSC	STATUS, Z
$04DE	$2CE4			GOTO	L_Adc_Read_3
$04DF	$0DF0			RLF	STACK_0, 1
$04E0	$0DF1			RLF	STACK_0+1, 1
$04E1	$1070			BCF	STACK_0, 0
$04E2	$3FFF			ADDLW	255
$04E3	$2CDD			GOTO	L_Adc_Read_2
$04E4	$	L_Adc_Read_3:
$04E4	$1683			BSF	STATUS, RP0
$04E5	$081E			MOVF	ADRESL, 0
$04E6	$04F0			IORWF	STACK_0, 1
$04E7	$3000			MOVLW	0
$04E8	$04F1			IORWF	STACK_0+1, 1
$04E9	$0008			RETURN
$04EA	$	_Display_Tensione:
;MonitorCaricaBatterie.c,113 :: 		void Display_Tensione(unsigned int adcVolt1, unsigned int adcVolt2)
;MonitorCaricaBatterie.c,119 :: 		tensione1 = (MAX_V1_BATTERIA * (unsigned long)adcVolt1) / 1023;
$04EA	$1303			BCF	STATUS, RP1
$04EB	$1283			BCF	STATUS, RP0
$04EC	$0837			MOVF	FARG_Display_Tensione+0, 0
$04ED	$00F0			MOVWF	STACK_0
$04EE	$0838			MOVF	FARG_Display_Tensione+1, 0
$04EF	$00F1			MOVWF	STACK_0+1
$04F0	$01F2			CLRF	STACK_0+2
$04F1	$01F3			CLRF	STACK_0+3
$04F2	$3072			MOVLW	114
$04F3	$00F4			MOVWF	STACK_4
$04F4	$3006			MOVLW	6
$04F5	$00F5			MOVWF	STACK_4+1
$04F6	$01F6			CLRF	STACK_4+2
$04F7	$01F7			CLRF	STACK_4+3
$04F8	$22FA			CALL	_mul_32x32_u
$04F9	$30FF			MOVLW	255
$04FA	$00F4			MOVWF	STACK_4
$04FB	$3003			MOVLW	3
$04FC	$00F5			MOVWF	STACK_4+1
$04FD	$01F6			CLRF	STACK_4+2
$04FE	$01F7			CLRF	STACK_4+3
$04FF	$2331			CALL	_div_32x32_s
$0500	$0870			MOVF	STACK_0, 0
$0501	$00BB			MOVWF	Display_Tensione_tensione1_L0
$0502	$0871			MOVF	STACK_0+1, 0
$0503	$00BC			MOVWF	Display_Tensione_tensione1_L0+1
$0504	$0872			MOVF	STACK_0+2, 0
$0505	$00BD			MOVWF	Display_Tensione_tensione1_L0+2
$0506	$0873			MOVF	STACK_0+3, 0
$0507	$00BE			MOVWF	Display_Tensione_tensione1_L0+3
;MonitorCaricaBatterie.c,120 :: 		tensione2 = (MAX_V2_BATTERIA * (unsigned long)adcVolt2) / 1023;
$0508	$0839			MOVF	FARG_Display_Tensione+2, 0
$0509	$00F0			MOVWF	STACK_0
$050A	$083A			MOVF	FARG_Display_Tensione+3, 0
$050B	$00F1			MOVWF	STACK_0+1
$050C	$01F2			CLRF	STACK_0+2
$050D	$01F3			CLRF	STACK_0+3
$050E	$3072			MOVLW	114
$050F	$00F4			MOVWF	STACK_4
$0510	$3006			MOVLW	6
$0511	$00F5			MOVWF	STACK_4+1
$0512	$01F6			CLRF	STACK_4+2
$0513	$01F7			CLRF	STACK_4+3
$0514	$22FA			CALL	_mul_32x32_u
$0515	$30FF			MOVLW	255
$0516	$00F4			MOVWF	STACK_4
$0517	$3003			MOVLW	3
$0518	$00F5			MOVWF	STACK_4+1
$0519	$01F6			CLRF	STACK_4+2
$051A	$01F7			CLRF	STACK_4+3
$051B	$2331			CALL	_div_32x32_s
$051C	$0870			MOVF	STACK_0, 0
$051D	$00BF			MOVWF	Display_Tensione_tensione2_L0
$051E	$0871			MOVF	STACK_0+1, 0
$051F	$00C0			MOVWF	Display_Tensione_tensione2_L0+1
$0520	$0872			MOVF	STACK_0+2, 0
$0521	$00C1			MOVWF	Display_Tensione_tensione2_L0+2
$0522	$0873			MOVF	STACK_0+3, 0
$0523	$00C2			MOVWF	Display_Tensione_tensione2_L0+3
;MonitorCaricaBatterie.c,125 :: 		Usart_Write('[');
$0524	$305B			MOVLW	91
$0525	$00C4			MOVWF	FARG_Usart_Write+0
$0526	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,126 :: 		ch = tensione1 / 1000;
$0527	$30E8			MOVLW	232
$0528	$00F4			MOVWF	STACK_4
$0529	$3003			MOVLW	3
$052A	$00F5			MOVWF	STACK_4+1
$052B	$01F6			CLRF	STACK_4+2
$052C	$01F7			CLRF	STACK_4+3
$052D	$083B			MOVF	Display_Tensione_tensione1_L0, 0
$052E	$00F0			MOVWF	STACK_0
$052F	$083C			MOVF	Display_Tensione_tensione1_L0+1, 0
$0530	$00F1			MOVWF	STACK_0+1
$0531	$083D			MOVF	Display_Tensione_tensione1_L0+2, 0
$0532	$00F2			MOVWF	STACK_0+2
$0533	$083E			MOVF	Display_Tensione_tensione1_L0+3, 0
$0534	$00F3			MOVWF	STACK_0+3
$0535	$2331			CALL	_div_32x32_s
$0536	$0870			MOVF	STACK_0, 0
$0537	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,127 :: 		Usart_Write(ch);
$0538	$0870			MOVF	STACK_0, 0
$0539	$00C4			MOVWF	FARG_Usart_Write+0
$053A	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,128 :: 		LCD_Chr(1,11,48+ch);
$053B	$3001			MOVLW	1
$053C	$00C4			MOVWF	FARG_Lcd_Chr+0
$053D	$300B			MOVLW	11
$053E	$00C5			MOVWF	FARG_Lcd_Chr+1
$053F	$0843			MOVF	Display_Tensione_ch_L0, 0
$0540	$3F30			ADDLW	48
$0541	$00C6			MOVWF	FARG_Lcd_Chr+2
$0542	$22C3			CALL	_Lcd_Chr
;MonitorCaricaBatterie.c,129 :: 		ch = (tensione1 / 100) % 10;
$0543	$3064			MOVLW	100
$0544	$00F4			MOVWF	STACK_4
$0545	$01F5			CLRF	STACK_4+1
$0546	$01F6			CLRF	STACK_4+2
$0547	$01F7			CLRF	STACK_4+3
$0548	$083B			MOVF	Display_Tensione_tensione1_L0, 0
$0549	$00F0			MOVWF	STACK_0
$054A	$083C			MOVF	Display_Tensione_tensione1_L0+1, 0
$054B	$00F1			MOVWF	STACK_0+1
$054C	$083D			MOVF	Display_Tensione_tensione1_L0+2, 0
$054D	$00F2			MOVWF	STACK_0+2
$054E	$083E			MOVF	Display_Tensione_tensione1_L0+3, 0
$054F	$00F3			MOVWF	STACK_0+3
$0550	$2331			CALL	_div_32x32_s
$0551	$300A			MOVLW	10
$0552	$00F4			MOVWF	STACK_4
$0553	$01F5			CLRF	STACK_4+1
$0554	$01F6			CLRF	STACK_4+2
$0555	$01F7			CLRF	STACK_4+3
$0556	$2331			CALL	_div_32x32_s
$0557	$0878			MOVF	STACK_8, 0
$0558	$00F0			MOVWF	STACK_0
$0559	$0879			MOVF	STACK_9, 0
$055A	$00F1			MOVWF	STACK_1
$055B	$087A			MOVF	STACK_10, 0
$055C	$00F2			MOVWF	STACK_2
$055D	$087B			MOVF	STACK_11, 0
$055E	$00F3			MOVWF	STACK_3
$055F	$0870			MOVF	STACK_0, 0
$0560	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,130 :: 		Usart_Write(ch);
$0561	$0870			MOVF	STACK_0, 0
$0562	$00C4			MOVWF	FARG_Usart_Write+0
$0563	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,131 :: 		LCD_Chr_CP(48+ch);
$0564	$0843			MOVF	Display_Tensione_ch_L0, 0
$0565	$3F30			ADDLW	48
$0566	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$0567	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,132 :: 		LCD_Chr_CP('.');
$0568	$302E			MOVLW	46
$0569	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$056A	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,133 :: 		ch = (tensione1 / 10) % 10;
$056B	$300A			MOVLW	10
$056C	$00F4			MOVWF	STACK_4
$056D	$01F5			CLRF	STACK_4+1
$056E	$01F6			CLRF	STACK_4+2
$056F	$01F7			CLRF	STACK_4+3
$0570	$083B			MOVF	Display_Tensione_tensione1_L0, 0
$0571	$00F0			MOVWF	STACK_0
$0572	$083C			MOVF	Display_Tensione_tensione1_L0+1, 0
$0573	$00F1			MOVWF	STACK_0+1
$0574	$083D			MOVF	Display_Tensione_tensione1_L0+2, 0
$0575	$00F2			MOVWF	STACK_0+2
$0576	$083E			MOVF	Display_Tensione_tensione1_L0+3, 0
$0577	$00F3			MOVWF	STACK_0+3
$0578	$2331			CALL	_div_32x32_s
$0579	$300A			MOVLW	10
$057A	$00F4			MOVWF	STACK_4
$057B	$01F5			CLRF	STACK_4+1
$057C	$01F6			CLRF	STACK_4+2
$057D	$01F7			CLRF	STACK_4+3
$057E	$2331			CALL	_div_32x32_s
$057F	$0878			MOVF	STACK_8, 0
$0580	$00F0			MOVWF	STACK_0
$0581	$0879			MOVF	STACK_9, 0
$0582	$00F1			MOVWF	STACK_1
$0583	$087A			MOVF	STACK_10, 0
$0584	$00F2			MOVWF	STACK_2
$0585	$087B			MOVF	STACK_11, 0
$0586	$00F3			MOVWF	STACK_3
$0587	$0870			MOVF	STACK_0, 0
$0588	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,134 :: 		Usart_Write(ch);
$0589	$0870			MOVF	STACK_0, 0
$058A	$00C4			MOVWF	FARG_Usart_Write+0
$058B	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,135 :: 		LCD_Chr_CP(48+ch);
$058C	$0843			MOVF	Display_Tensione_ch_L0, 0
$058D	$3F30			ADDLW	48
$058E	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$058F	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,136 :: 		ch = tensione1 % 10;
$0590	$300A			MOVLW	10
$0591	$00F4			MOVWF	STACK_4
$0592	$01F5			CLRF	STACK_4+1
$0593	$01F6			CLRF	STACK_4+2
$0594	$01F7			CLRF	STACK_4+3
$0595	$083B			MOVF	Display_Tensione_tensione1_L0, 0
$0596	$00F0			MOVWF	STACK_0
$0597	$083C			MOVF	Display_Tensione_tensione1_L0+1, 0
$0598	$00F1			MOVWF	STACK_0+1
$0599	$083D			MOVF	Display_Tensione_tensione1_L0+2, 0
$059A	$00F2			MOVWF	STACK_0+2
$059B	$083E			MOVF	Display_Tensione_tensione1_L0+3, 0
$059C	$00F3			MOVWF	STACK_0+3
$059D	$2331			CALL	_div_32x32_s
$059E	$0878			MOVF	STACK_8, 0
$059F	$00F0			MOVWF	STACK_0
$05A0	$0879			MOVF	STACK_9, 0
$05A1	$00F1			MOVWF	STACK_1
$05A2	$087A			MOVF	STACK_10, 0
$05A3	$00F2			MOVWF	STACK_2
$05A4	$087B			MOVF	STACK_11, 0
$05A5	$00F3			MOVWF	STACK_3
$05A6	$0870			MOVF	STACK_0, 0
$05A7	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,137 :: 		Usart_Write(ch);
$05A8	$0870			MOVF	STACK_0, 0
$05A9	$00C4			MOVWF	FARG_Usart_Write+0
$05AA	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,138 :: 		LCD_Chr_CP(48+ch);
$05AB	$0843			MOVF	Display_Tensione_ch_L0, 0
$05AC	$3F30			ADDLW	48
$05AD	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$05AE	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,141 :: 		ch = tensione2 / 1000;
$05AF	$30E8			MOVLW	232
$05B0	$00F4			MOVWF	STACK_4
$05B1	$3003			MOVLW	3
$05B2	$00F5			MOVWF	STACK_4+1
$05B3	$01F6			CLRF	STACK_4+2
$05B4	$01F7			CLRF	STACK_4+3
$05B5	$083F			MOVF	Display_Tensione_tensione2_L0, 0
$05B6	$00F0			MOVWF	STACK_0
$05B7	$0840			MOVF	Display_Tensione_tensione2_L0+1, 0
$05B8	$00F1			MOVWF	STACK_0+1
$05B9	$0841			MOVF	Display_Tensione_tensione2_L0+2, 0
$05BA	$00F2			MOVWF	STACK_0+2
$05BB	$0842			MOVF	Display_Tensione_tensione2_L0+3, 0
$05BC	$00F3			MOVWF	STACK_0+3
$05BD	$2331			CALL	_div_32x32_s
$05BE	$0870			MOVF	STACK_0, 0
$05BF	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,142 :: 		Usart_Write(ch);
$05C0	$0870			MOVF	STACK_0, 0
$05C1	$00C4			MOVWF	FARG_Usart_Write+0
$05C2	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,143 :: 		LCD_Chr(2,11,48+ch);
$05C3	$3002			MOVLW	2
$05C4	$00C4			MOVWF	FARG_Lcd_Chr+0
$05C5	$300B			MOVLW	11
$05C6	$00C5			MOVWF	FARG_Lcd_Chr+1
$05C7	$0843			MOVF	Display_Tensione_ch_L0, 0
$05C8	$3F30			ADDLW	48
$05C9	$00C6			MOVWF	FARG_Lcd_Chr+2
$05CA	$22C3			CALL	_Lcd_Chr
;MonitorCaricaBatterie.c,144 :: 		ch = (tensione2 / 100) % 10;
$05CB	$3064			MOVLW	100
$05CC	$00F4			MOVWF	STACK_4
$05CD	$01F5			CLRF	STACK_4+1
$05CE	$01F6			CLRF	STACK_4+2
$05CF	$01F7			CLRF	STACK_4+3
$05D0	$083F			MOVF	Display_Tensione_tensione2_L0, 0
$05D1	$00F0			MOVWF	STACK_0
$05D2	$0840			MOVF	Display_Tensione_tensione2_L0+1, 0
$05D3	$00F1			MOVWF	STACK_0+1
$05D4	$0841			MOVF	Display_Tensione_tensione2_L0+2, 0
$05D5	$00F2			MOVWF	STACK_0+2
$05D6	$0842			MOVF	Display_Tensione_tensione2_L0+3, 0
$05D7	$00F3			MOVWF	STACK_0+3
$05D8	$2331			CALL	_div_32x32_s
$05D9	$300A			MOVLW	10
$05DA	$00F4			MOVWF	STACK_4
$05DB	$01F5			CLRF	STACK_4+1
$05DC	$01F6			CLRF	STACK_4+2
$05DD	$01F7			CLRF	STACK_4+3
$05DE	$2331			CALL	_div_32x32_s
$05DF	$0878			MOVF	STACK_8, 0
$05E0	$00F0			MOVWF	STACK_0
$05E1	$0879			MOVF	STACK_9, 0
$05E2	$00F1			MOVWF	STACK_1
$05E3	$087A			MOVF	STACK_10, 0
$05E4	$00F2			MOVWF	STACK_2
$05E5	$087B			MOVF	STACK_11, 0
$05E6	$00F3			MOVWF	STACK_3
$05E7	$0870			MOVF	STACK_0, 0
$05E8	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,145 :: 		Usart_Write(ch);
$05E9	$0870			MOVF	STACK_0, 0
$05EA	$00C4			MOVWF	FARG_Usart_Write+0
$05EB	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,146 :: 		LCD_Chr_CP(48+ch);
$05EC	$0843			MOVF	Display_Tensione_ch_L0, 0
$05ED	$3F30			ADDLW	48
$05EE	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$05EF	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,147 :: 		LCD_Chr_CP('.');
$05F0	$302E			MOVLW	46
$05F1	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$05F2	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,148 :: 		ch = (tensione2 / 10) % 10;
$05F3	$300A			MOVLW	10
$05F4	$00F4			MOVWF	STACK_4
$05F5	$01F5			CLRF	STACK_4+1
$05F6	$01F6			CLRF	STACK_4+2
$05F7	$01F7			CLRF	STACK_4+3
$05F8	$083F			MOVF	Display_Tensione_tensione2_L0, 0
$05F9	$00F0			MOVWF	STACK_0
$05FA	$0840			MOVF	Display_Tensione_tensione2_L0+1, 0
$05FB	$00F1			MOVWF	STACK_0+1
$05FC	$0841			MOVF	Display_Tensione_tensione2_L0+2, 0
$05FD	$00F2			MOVWF	STACK_0+2
$05FE	$0842			MOVF	Display_Tensione_tensione2_L0+3, 0
$05FF	$00F3			MOVWF	STACK_0+3
$0600	$2331			CALL	_div_32x32_s
$0601	$300A			MOVLW	10
$0602	$00F4			MOVWF	STACK_4
$0603	$01F5			CLRF	STACK_4+1
$0604	$01F6			CLRF	STACK_4+2
$0605	$01F7			CLRF	STACK_4+3
$0606	$2331			CALL	_div_32x32_s
$0607	$0878			MOVF	STACK_8, 0
$0608	$00F0			MOVWF	STACK_0
$0609	$0879			MOVF	STACK_9, 0
$060A	$00F1			MOVWF	STACK_1
$060B	$087A			MOVF	STACK_10, 0
$060C	$00F2			MOVWF	STACK_2
$060D	$087B			MOVF	STACK_11, 0
$060E	$00F3			MOVWF	STACK_3
$060F	$0870			MOVF	STACK_0, 0
$0610	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,149 :: 		Usart_Write(ch);
$0611	$0870			MOVF	STACK_0, 0
$0612	$00C4			MOVWF	FARG_Usart_Write+0
$0613	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,150 :: 		LCD_Chr_CP(48+ch);
$0614	$0843			MOVF	Display_Tensione_ch_L0, 0
$0615	$3F30			ADDLW	48
$0616	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$0617	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,151 :: 		ch = tensione2 % 10;
$0618	$300A			MOVLW	10
$0619	$00F4			MOVWF	STACK_4
$061A	$01F5			CLRF	STACK_4+1
$061B	$01F6			CLRF	STACK_4+2
$061C	$01F7			CLRF	STACK_4+3
$061D	$083F			MOVF	Display_Tensione_tensione2_L0, 0
$061E	$00F0			MOVWF	STACK_0
$061F	$0840			MOVF	Display_Tensione_tensione2_L0+1, 0
$0620	$00F1			MOVWF	STACK_0+1
$0621	$0841			MOVF	Display_Tensione_tensione2_L0+2, 0
$0622	$00F2			MOVWF	STACK_0+2
$0623	$0842			MOVF	Display_Tensione_tensione2_L0+3, 0
$0624	$00F3			MOVWF	STACK_0+3
$0625	$2331			CALL	_div_32x32_s
$0626	$0878			MOVF	STACK_8, 0
$0627	$00F0			MOVWF	STACK_0
$0628	$0879			MOVF	STACK_9, 0
$0629	$00F1			MOVWF	STACK_1
$062A	$087A			MOVF	STACK_10, 0
$062B	$00F2			MOVWF	STACK_2
$062C	$087B			MOVF	STACK_11, 0
$062D	$00F3			MOVWF	STACK_3
$062E	$0870			MOVF	STACK_0, 0
$062F	$00C3			MOVWF	Display_Tensione_ch_L0
;MonitorCaricaBatterie.c,152 :: 		Usart_Write(ch);
$0630	$0870			MOVF	STACK_0, 0
$0631	$00C4			MOVWF	FARG_Usart_Write+0
$0632	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,153 :: 		LCD_Chr_CP(48+ch);
$0633	$0843			MOVF	Display_Tensione_ch_L0, 0
$0634	$3F30			ADDLW	48
$0635	$00DD			MOVWF	FARG_Lcd_Chr_CP+0
$0636	$2059			CALL	_Lcd_Chr_CP
;MonitorCaricaBatterie.c,155 :: 		Usart_Write(']');
$0637	$305D			MOVLW	93
$0638	$00C4			MOVWF	FARG_Usart_Write+0
$0639	$22B3			CALL	_Usart_Write
;MonitorCaricaBatterie.c,180 :: 		}
$063A	$0008			RETURN
$063B	$	GlobalIniMonitorCaricaBatterie:
$063B	$3001			MOVLW	1
$063C	$1303			BCF	STATUS, RP1
$063D	$1283			BCF	STATUS, RP0
$063E	$00A6			MOVWF	_intCont+0
$063F	$3000			MOVLW	0
$0640	$00A7			MOVWF	_intCont+1
$0641	$3001			MOVLW	1
$0642	$00A8			MOVWF	_lcd_light_status+0
;MonitorCaricaBatterie.c,251 :: 		}
$0643	$0008			RETURN
$0644	$	_Usart_Init:
$0644	$1303			BCF	STATUS, RP1
$0645	$1683			BSF	STATUS, RP0
$0646	$1698			BSF	TXSTA, 5
$0647	$3090			MOVLW	144
$0648	$1283			BCF	STATUS, RP0
$0649	$0098			MOVWF	RCSTA
$064A	$1683			BSF	STATUS, RP0
$064B	$1787			BSF	TRISC, 7
$064C	$1307			BCF	TRISC, 6
$064D	$	L_Usart_Init_0:
$064D	$1283			BCF	STATUS, RP0
$064E	$1E8C			BTFSS	PIR1, 5
$064F	$2E53			GOTO	L_Usart_Init_1
$0650	$081A			MOVF	RCREG, 0
$0651	$00BB			MOVWF	Usart_Init_tmp_L0
$0652	$2E4D			GOTO	L_Usart_Init_0
$0653	$	L_Usart_Init_1:
$0653	$0008			RETURN
$0800	$	_main:
;MonitorCaricaBatterie.c,193 :: 		void main ()
;MonitorCaricaBatterie.c,202 :: 		init_MCU();
$0800	$118A			BCF	PCLATH, 3
$0801	$263B			CALL	GlobalIniMonitorCaricaBatterie
$0802	$158A			BSF	PCLATH, 3
$0803	$118A			BCF	PCLATH, 3
$0804	$23CB			CALL	_init_MCU
$0805	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,203 :: 		lcd_set_light(LCD_LIGHT_ON);
$0806	$3001			MOVLW	1
$0807	$1283			BCF	STATUS, RP0
$0808	$00B7			MOVWF	FARG_lcd_set_light+0
$0809	$118A			BCF	PCLATH, 3
$080A	$23D5			CALL	_lcd_set_light
$080B	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,204 :: 		start_LCD();
$080C	$118A			BCF	PCLATH, 3
$080D	$23E6			CALL	_start_LCD
$080E	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,206 :: 		Display_Info();
$080F	$118A			BCF	PCLATH, 3
$0810	$2430			CALL	_Display_Info
$0811	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,208 :: 		rom_str2lcd(1,1,txt_riga1);
$0812	$3001			MOVLW	1
$0813	$00C4			MOVWF	FARG_rom_str2lcd+0
$0814	$3001			MOVLW	1
$0815	$00C5			MOVWF	FARG_rom_str2lcd+1
$0816	$3098			MOVLW	#_txt_riga1
$0817	$00C6			MOVWF	FARG_rom_str2lcd+2
$0818	$3004			MOVLW	@#_txt_riga1
$0819	$00C7			MOVWF	FARG_rom_str2lcd+3
$081A	$118A			BCF	PCLATH, 3
$081B	$2228			CALL	_rom_str2lcd
$081C	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,209 :: 		rom_str2lcd(2,1,txt_riga2);
$081D	$3002			MOVLW	2
$081E	$00C4			MOVWF	FARG_rom_str2lcd+0
$081F	$3001			MOVLW	1
$0820	$00C5			MOVWF	FARG_rom_str2lcd+1
$0821	$30AA			MOVLW	#_txt_riga2
$0822	$00C6			MOVWF	FARG_rom_str2lcd+2
$0823	$3004			MOVLW	@#_txt_riga2
$0824	$00C7			MOVWF	FARG_rom_str2lcd+3
$0825	$118A			BCF	PCLATH, 3
$0826	$2228			CALL	_rom_str2lcd
$0827	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,211 :: 		USART_Init(9600);  // Initalize USART (9600 baud rate, 1 stop bit, ...
$0828	$3081			MOVLW	129
$0829	$1683			BSF	STATUS, RP0
$082A	$0099			MOVWF	SPBRG
$082B	$1518			BSF	TXSTA, BRGH
$082C	$118A			BCF	PCLATH, 3
$082D	$2644			CALL	_Usart_Init
$082E	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,213 :: 		while (1)
$082F	$	L_main_4:
;MonitorCaricaBatterie.c,218 :: 		if (lcd_light_status == LCD_LIGHT_ON) {
$082F	$0828			MOVF	_lcd_light_status, 0
$0830	$3A01			XORLW	1
$0831	$1D03			BTFSS	STATUS, Z
$0832	$2842			GOTO	L_main_6
;MonitorCaricaBatterie.c,219 :: 		intCont++;
$0833	$0AA6			INCF	_intCont, 1
$0834	$1903			BTFSC	STATUS, Z
$0835	$0AA7			INCF	_intCont+1, 1
;MonitorCaricaBatterie.c,220 :: 		if (intCont >= LCD_LIGHT_TIME){
$0836	$3000			MOVLW	0
$0837	$0227			SUBWF	_intCont+1, 0
$0838	$1D03			BTFSS	STATUS, Z
$0839	$283C			GOTO	L_main_16
$083A	$307E			MOVLW	126
$083B	$0226			SUBWF	_intCont, 0
$083C	$	L_main_16:
$083C	$1C03			BTFSS	STATUS, C
$083D	$2842			GOTO	L_main_7
;MonitorCaricaBatterie.c,221 :: 		lcd_set_light(LCD_LIGHT_OFF);
$083E	$01B7			CLRF	FARG_lcd_set_light+0, 1
$083F	$118A			BCF	PCLATH, 3
$0840	$23D5			CALL	_lcd_set_light
$0841	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,222 :: 		}
$0842	$	L_main_7:
;MonitorCaricaBatterie.c,223 :: 		}
$0842	$	L_main_6:
;MonitorCaricaBatterie.c,225 :: 		adc_volt1 = 0;
$0842	$01A9			CLRF	main_adc_volt1_L0
$0843	$01AA			CLRF	main_adc_volt1_L0+1
$0844	$01AB			CLRF	main_adc_volt1_L0+2
$0845	$01AC			CLRF	main_adc_volt1_L0+3
;MonitorCaricaBatterie.c,226 :: 		adc_volt2 = 0;
$0846	$01AD			CLRF	main_adc_volt2_L0
$0847	$01AE			CLRF	main_adc_volt2_L0+1
$0848	$01AF			CLRF	main_adc_volt2_L0+2
$0849	$01B0			CLRF	main_adc_volt2_L0+3
;MonitorCaricaBatterie.c,228 :: 		for (i=0;i<NUM_LETTURE;i++){
$084A	$01B1			CLRF	main_i_L0
$084B	$01B2			CLRF	main_i_L0+1
$084C	$	L_main_8:
$084C	$3080			MOVLW	128
$084D	$0632			XORWF	main_i_L0+1, 0
$084E	$00F0			MOVWF	STACK_0
$084F	$3080			MOVLW	128
$0850	$3A01			XORLW	1
$0851	$0270			SUBWF	STACK_0, 0
$0852	$1D03			BTFSS	STATUS, Z
$0853	$2856			GOTO	L_main_17
$0854	$3090			MOVLW	144
$0855	$0231			SUBWF	main_i_L0, 0
$0856	$	L_main_17:
$0856	$1803			BTFSC	STATUS, C
$0857	$28E6			GOTO	L_main_9
;MonitorCaricaBatterie.c,229 :: 		adc_volt1 = adc_volt1 + ADC_read(0);  //AN0
$0858	$01B7			CLRF	FARG_Adc_Read+0, 1
$0859	$118A			BCF	PCLATH, 3
$085A	$24BC			CALL	_Adc_Read
$085B	$158A			BSF	PCLATH, 3
$085C	$3000			MOVLW	0
$085D	$00F2			MOVWF	STACK_0+2
$085E	$00F3			MOVWF	STACK_0+3
$085F	$1283			BCF	STATUS, RP0
$0860	$0829			MOVF	main_adc_volt1_L0, 0
$0861	$07F0			ADDWF	STACK_0, 1
$0862	$082A			MOVF	main_adc_volt1_L0+1, 0
$0863	$1803			BTFSC	STATUS, C
$0864	$0F2A			INCFSZ	main_adc_volt1_L0+1, 0
$0865	$07F1			ADDWF	STACK_0+1, 1
$0866	$082B			MOVF	main_adc_volt1_L0+2, 0
$0867	$1803			BTFSC	STATUS, C
$0868	$0F2B			INCFSZ	main_adc_volt1_L0+2, 0
$0869	$07F2			ADDWF	STACK_0+2, 1
$086A	$082C			MOVF	main_adc_volt1_L0+3, 0
$086B	$1803			BTFSC	STATUS, C
$086C	$0F2C			INCFSZ	main_adc_volt1_L0+3, 0
$086D	$07F3			ADDWF	STACK_0+3, 1
$086E	$0870			MOVF	STACK_0, 0
$086F	$00A9			MOVWF	main_adc_volt1_L0
$0870	$0871			MOVF	STACK_0+1, 0
$0871	$00AA			MOVWF	main_adc_volt1_L0+1
$0872	$0872			MOVF	STACK_0+2, 0
$0873	$00AB			MOVWF	main_adc_volt1_L0+2
$0874	$0873			MOVF	STACK_0+3, 0
$0875	$00AC			MOVWF	main_adc_volt1_L0+3
;MonitorCaricaBatterie.c,230 :: 		adc_volt2 = adc_volt2 + ADC_read(1);  //AN1
$0876	$3001			MOVLW	1
$0877	$00B7			MOVWF	FARG_Adc_Read+0
$0878	$118A			BCF	PCLATH, 3
$0879	$24BC			CALL	_Adc_Read
$087A	$158A			BSF	PCLATH, 3
$087B	$3000			MOVLW	0
$087C	$00F2			MOVWF	STACK_0+2
$087D	$00F3			MOVWF	STACK_0+3
$087E	$1283			BCF	STATUS, RP0
$087F	$082D			MOVF	main_adc_volt2_L0, 0
$0880	$07F0			ADDWF	STACK_0, 1
$0881	$082E			MOVF	main_adc_volt2_L0+1, 0
$0882	$1803			BTFSC	STATUS, C
$0883	$0F2E			INCFSZ	main_adc_volt2_L0+1, 0
$0884	$07F1			ADDWF	STACK_0+1, 1
$0885	$082F			MOVF	main_adc_volt2_L0+2, 0
$0886	$1803			BTFSC	STATUS, C
$0887	$0F2F			INCFSZ	main_adc_volt2_L0+2, 0
$0888	$07F2			ADDWF	STACK_0+2, 1
$0889	$0830			MOVF	main_adc_volt2_L0+3, 0
$088A	$1803			BTFSC	STATUS, C
$088B	$0F30			INCFSZ	main_adc_volt2_L0+3, 0
$088C	$07F3			ADDWF	STACK_0+3, 1
$088D	$0870			MOVF	STACK_0, 0
$088E	$00AD			MOVWF	main_adc_volt2_L0
$088F	$0871			MOVF	STACK_0+1, 0
$0890	$00AE			MOVWF	main_adc_volt2_L0+1
$0891	$0872			MOVF	STACK_0+2, 0
$0892	$00AF			MOVWF	main_adc_volt2_L0+2
$0893	$0873			MOVF	STACK_0+3, 0
$0894	$00B0			MOVWF	main_adc_volt2_L0+3
;MonitorCaricaBatterie.c,231 :: 		Delay_ms(TEMPO_LETTURA);
$0895	$3007			MOVLW	7
$0896	$00FB			MOVWF	STACK_11
$0897	$30FF			MOVLW	255
$0898	$00FA			MOVWF	STACK_10
$0899	$0BFB			DECFSZ	STACK_11, F
$089A	$289C			GOTO	$+2
$089B	$289F			GOTO	$+4
$089C	$0BFA			DECFSZ	STACK_10, F
$089D	$289C			GOTO	$-1
$089E	$2899			GOTO	$-5
$089F	$3079			MOVLW	121
$08A0	$00FA			MOVWF	STACK_10
$08A1	$0BFA			DECFSZ	STACK_10, F
$08A2	$28A1			GOTO	$-1
$08A3	$0000			NOP
;MonitorCaricaBatterie.c,234 :: 		if (PORTA.F2 == BUTTON_DOWN) {
$08A4	$3000			MOVLW	0
$08A5	$1905			BTFSC	PORTA, 2
$08A6	$3001			MOVLW	1
$08A7	$00F4			MOVWF	STACK_4
$08A8	$0874			MOVF	STACK_4, 0
$08A9	$3A01			XORLW	1
$08AA	$1D03			BTFSS	STATUS, Z
$08AB	$28E2			GOTO	L_main_11
;MonitorCaricaBatterie.c,235 :: 		Delay_ms(500);  // Debounce e ferma il codice fino a quando non si
$08AC	$300D			MOVLW	13
$08AD	$00FC			MOVWF	STACK_12
$08AE	$30FF			MOVLW	255
$08AF	$00FB			MOVWF	STACK_11
$08B0	$30FF			MOVLW	255
$08B1	$00FA			MOVWF	STACK_10
$08B2	$0BFC			DECFSZ	STACK_12, F
$08B3	$28B5			GOTO	$+2
$08B4	$28BC			GOTO	$+8
$08B5	$0BFB			DECFSZ	STACK_11, F
$08B6	$28B8			GOTO	$+2
$08B7	$28BB			GOTO	$+4
$08B8	$0BFA			DECFSZ	STACK_10, F
$08B9	$28B8			GOTO	$-1
$08BA	$28B5			GOTO	$-5
$08BB	$28B2			GOTO	$-9
$08BC	$30BF			MOVLW	191
$08BD	$00FB			MOVWF	STACK_11
$08BE	$30FF			MOVLW	255
$08BF	$00FA			MOVWF	STACK_10
$08C0	$0BFB			DECFSZ	STACK_11, F
$08C1	$28C3			GOTO	$+2
$08C2	$28C6			GOTO	$+4
$08C3	$0BFA			DECFSZ	STACK_10, F
$08C4	$28C3			GOTO	$-1
$08C5	$28C0			GOTO	$-5
$08C6	$302C			MOVLW	44
$08C7	$00FA			MOVWF	STACK_10
$08C8	$0BFA			DECFSZ	STACK_10, F
$08C9	$28C8			GOTO	$-1
$08CA	$0000			NOP
$08CB	$0000			NOP
;MonitorCaricaBatterie.c,236 :: 		while (PORTA.F2 == BUTTON_DOWN) { }  // rilascia il tasto premuto
$08CC	$	L_main_12:
$08CC	$3000			MOVLW	0
$08CD	$1905			BTFSC	PORTA, 2
$08CE	$3001			MOVLW	1
$08CF	$00F4			MOVWF	STACK_4
$08D0	$0874			MOVF	STACK_4, 0
$08D1	$3A01			XORLW	1
$08D2	$1903			BTFSC	STATUS, Z
$08D3	$28CC			GOTO	L_main_12
$08D4	$	L_main_13:
;MonitorCaricaBatterie.c,237 :: 		if (lcd_light_status == LCD_LIGHT_ON) {
$08D4	$0828			MOVF	_lcd_light_status, 0
$08D5	$3A01			XORLW	1
$08D6	$1D03			BTFSS	STATUS, Z
$08D7	$28DD			GOTO	L_main_14
;MonitorCaricaBatterie.c,238 :: 		lcd_set_light(LCD_LIGHT_OFF);
$08D8	$01B7			CLRF	FARG_lcd_set_light+0, 1
$08D9	$118A			BCF	PCLATH, 3
$08DA	$23D5			CALL	_lcd_set_light
$08DB	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,239 :: 		} else {
$08DC	$28E2			GOTO	L_main_15
$08DD	$	L_main_14:
;MonitorCaricaBatterie.c,240 :: 		lcd_set_light(LCD_LIGHT_ON);
$08DD	$3001			MOVLW	1
$08DE	$00B7			MOVWF	FARG_lcd_set_light+0
$08DF	$118A			BCF	PCLATH, 3
$08E0	$23D5			CALL	_lcd_set_light
$08E1	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,241 :: 		}
$08E2	$	L_main_15:
;MonitorCaricaBatterie.c,242 :: 		}
$08E2	$	L_main_11:
;MonitorCaricaBatterie.c,243 :: 		}
$08E2	$	L_main_10:
;MonitorCaricaBatterie.c,228 :: 		for (i=0;i<NUM_LETTURE;i++){
$08E2	$0AB1			INCF	main_i_L0, 1
$08E3	$1903			BTFSC	STATUS, Z
$08E4	$0AB2			INCF	main_i_L0+1, 1
;MonitorCaricaBatterie.c,243 :: 		}
$08E5	$284C			GOTO	L_main_8
$08E6	$	L_main_9:
;MonitorCaricaBatterie.c,245 :: 		adc_volt1 = adc_volt1 / NUM_LETTURE;
$08E6	$3090			MOVLW	144
$08E7	$00F4			MOVWF	STACK_4
$08E8	$3001			MOVLW	1
$08E9	$00F5			MOVWF	STACK_4+1
$08EA	$01F6			CLRF	STACK_4+2
$08EB	$01F7			CLRF	STACK_4+3
$08EC	$0829			MOVF	main_adc_volt1_L0, 0
$08ED	$00F0			MOVWF	STACK_0
$08EE	$082A			MOVF	main_adc_volt1_L0+1, 0
$08EF	$00F1			MOVWF	STACK_0+1
$08F0	$082B			MOVF	main_adc_volt1_L0+2, 0
$08F1	$00F2			MOVWF	STACK_0+2
$08F2	$082C			MOVF	main_adc_volt1_L0+3, 0
$08F3	$00F3			MOVWF	STACK_0+3
$08F4	$118A			BCF	PCLATH, 3
$08F5	$2331			CALL	_div_32x32_s
$08F6	$158A			BSF	PCLATH, 3
$08F7	$0870			MOVF	STACK_0, 0
$08F8	$00B3			MOVWF	FLOC_main+10
$08F9	$0871			MOVF	STACK_0+1, 0
$08FA	$00B4			MOVWF	FLOC_main+11
$08FB	$0872			MOVF	STACK_0+2, 0
$08FC	$00B5			MOVWF	FLOC_main+12
$08FD	$0873			MOVF	STACK_0+3, 0
$08FE	$00B6			MOVWF	FLOC_main+13
$08FF	$0833			MOVF	FLOC_main+10, 0
$0900	$00A9			MOVWF	main_adc_volt1_L0
$0901	$0834			MOVF	FLOC_main+11, 0
$0902	$00AA			MOVWF	main_adc_volt1_L0+1
$0903	$0835			MOVF	FLOC_main+12, 0
$0904	$00AB			MOVWF	main_adc_volt1_L0+2
$0905	$0836			MOVF	FLOC_main+13, 0
$0906	$00AC			MOVWF	main_adc_volt1_L0+3
;MonitorCaricaBatterie.c,246 :: 		adc_volt2 = adc_volt2 / NUM_LETTURE;
$0907	$3090			MOVLW	144
$0908	$00F4			MOVWF	STACK_4
$0909	$3001			MOVLW	1
$090A	$00F5			MOVWF	STACK_4+1
$090B	$01F6			CLRF	STACK_4+2
$090C	$01F7			CLRF	STACK_4+3
$090D	$082D			MOVF	main_adc_volt2_L0, 0
$090E	$00F0			MOVWF	STACK_0
$090F	$082E			MOVF	main_adc_volt2_L0+1, 0
$0910	$00F1			MOVWF	STACK_0+1
$0911	$082F			MOVF	main_adc_volt2_L0+2, 0
$0912	$00F2			MOVWF	STACK_0+2
$0913	$0830			MOVF	main_adc_volt2_L0+3, 0
$0914	$00F3			MOVWF	STACK_0+3
$0915	$118A			BCF	PCLATH, 3
$0916	$2331			CALL	_div_32x32_s
$0917	$158A			BSF	PCLATH, 3
$0918	$0870			MOVF	STACK_0, 0
$0919	$00AD			MOVWF	main_adc_volt2_L0
$091A	$0871			MOVF	STACK_0+1, 0
$091B	$00AE			MOVWF	main_adc_volt2_L0+1
$091C	$0872			MOVF	STACK_0+2, 0
$091D	$00AF			MOVWF	main_adc_volt2_L0+2
$091E	$0873			MOVF	STACK_0+3, 0
$091F	$00B0			MOVWF	main_adc_volt2_L0+3
;MonitorCaricaBatterie.c,248 :: 		Display_Tensione (adc_volt1, adc_volt2);
$0920	$0833			MOVF	FLOC_main+10, 0
$0921	$00B7			MOVWF	FARG_Display_Tensione+0
$0922	$0834			MOVF	FLOC_main+11, 0
$0923	$00B8			MOVWF	FARG_Display_Tensione+1
$0924	$0870			MOVF	STACK_0, 0
$0925	$00B9			MOVWF	FARG_Display_Tensione+2
$0926	$0871			MOVF	STACK_0+1, 0
$0927	$00BA			MOVWF	FARG_Display_Tensione+3
$0928	$118A			BCF	PCLATH, 3
$0929	$24EA			CALL	_Display_Tensione
$092A	$158A			BSF	PCLATH, 3
;MonitorCaricaBatterie.c,249 :: 		}
$092B	$282F			GOTO	L_main_4
;MonitorCaricaBatterie.c,251 :: 		}
$092C	$292C			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		Delay_1us
$000C		Delay_5500us
$001D		Delay_50us
$0024		Lcd_Cmd
$0059		Lcd_Chr_CP
$0062		LCD_Out
$00A5		____DoICP
$00AC		SDIV3232L
$01DA		COMFREM
$01E8		Lcd_Init
$0228		rom_str2lcd
$0263		?table___txt_avvio1
$0275		?table___txt_avvio2
$0287		?table___txt_avvio3
$0299		?table___txt_avvio4
$02AB		Delay_22us
$02B3		Usart_Write
$02C3		Lcd_Chr
$02FA		Mul_32x32_U
$0331		Div_32x32_S
$03CB		init_MCU
$03D5		lcd_set_light
$03E6		start_LCD
$0430		Display_Info
$0498		?table___txt_riga1
$04AA		?table___txt_riga2
$04BC		Adc_Read
$04EA		Display_Tensione
$063B		GlobalIniMonitorCaricaBatterie
$0644		Usart_Init
$0800		main


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_Delay_1us:
$000C		_Delay_5500us:
$001D		_Delay_50us:
$0024		_Lcd_Cmd:
$002B		L_Lcd_Cmd_0:
$0039		L_Lcd_Cmd_1:
$003A		L_Lcd_Cmd_2:
$003F		L_Lcd_Cmd_3:
$004E		L_Lcd_Cmd_4:
$004F		L_Lcd_Cmd_5:
$0057		L_Lcd_Cmd_6:
$0058		L_Lcd_Cmd_7:
$0059		_Lcd_Chr_CP:
$0062		_LCD_Out:
$0063		L_LCD_Out_19:
$0068		L_LCD_Out_20:
$006B		L_LCD_Out_21:
$006E		L_LCD_Out_22:
$0071		L_LCD_Out_23:
$0074		L_LCD_Out_17:
$0087		L_LCD_Out_18:
$0092		L_LCD_Out_24:
$00A2		L_LCD_Out_25:
$00A5		_____DoICP:
$00AC		_SDIV3232L:
$00BF		LOOPS3232A:
$00D5		SADD22LA:
$00E2		SOK22LA:
$00FB		SADD22L8:
$0108		SOK22L8:
$010B		LOOPS3232B:
$0121		SADD22LB:
$012E		SOK22LB:
$0147		SADD22L16:
$0154		SOK22L16:
$0157		LOOPS3232C:
$016D		SADD22LC:
$017A		SOK22LC:
$0193		SADD22L24:
$01A0		SOK22L24:
$01A3		LOOPS3232D:
$01B9		SADD22LD:
$01C6		SOK22LD:
$01D9		SOK22L:
$01DA		_COMFREM:
$01E8		_Lcd_Init:
$0228		_rom_str2lcd:
$022B		L_rom_str2lcd_2:
$025B		L_rom_str2lcd_3:
$0263		table___txt_avvio1:
$0275		table___txt_avvio2:
$0287		table___txt_avvio3:
$0299		table___txt_avvio4:
$02AB		_Delay_22us:
$02B3		_Usart_Write:
$02B3		L_Usart_Write_3:
$02BF		L_Usart_Write_4:
$02C3		_Lcd_Chr:
$02C4		L_Lcd_Chr_10:
$02C9		L_Lcd_Chr_11:
$02CC		L_Lcd_Chr_12:
$02CF		L_Lcd_Chr_13:
$02D2		L_Lcd_Chr_14:
$02D5		L_Lcd_Chr_8:
$02E8		L_Lcd_Chr_9:
$02FA		_Mul_32x32_U:
$0302		_NEXT:
$0306		_LOOP:
$0322		_EXIT1:
$0330		_EXIT2:
$0331		_Div_32x32_S:
$0333		FXD3232S:
$0353		CA3232S:
$0360		C3232SX:
$0365		C3232S:
$0366		C3232S2:
$0368		C3232SOK:
$0381		C3232SX1:
$0392		C3232SX2:
$0398		C3232SX3:
$039E		C3232SX4:
$03C5		END_ALL:
$03C9		avoid_comfrem:
$03CB		_init_MCU:
$03D5		_lcd_set_light:
$03E2		L_lcd_set_light_0:
$03E5		L_lcd_set_light_1:
$03E6		_start_LCD:
$0430		_Display_Info:
$0498		table___txt_riga1:
$04AA		table___txt_riga2:
$04BC		_Adc_Read:
$04D2		L_Adc_Read_0:
$04D6		L_Adc_Read_1:
$04DD		L_Adc_Read_2:
$04E4		L_Adc_Read_3:
$04EA		_Display_Tensione:
$063B		GlobalIniMonitorCaricaBatterie:
$0644		_Usart_Init:
$064D		L_Usart_Init_0:
$0653		L_Usart_Init_1:
$0800		_main:
$082F		L_main_4:
$083C		L_main_16:
$0842		L_main_6:
$0842		L_main_7:
$084C		L_main_8:
$0856		L_main_17:
$08CC		L_main_12:
$08D4		L_main_13:
$08DD		L_main_14:
$08E2		L_main_10:
$08E2		L_main_11:
$08E2		L_main_15:
$08E6		L_main_9:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$001E		ADRESH
$001F		ADCON0
$0020		___math_tempb
$0021		LCD_port_address
$0022		LCD_cmd_status
$0023		___DoICPSavePCLATH
$0024		___DoICPHiAddr
$0025		___DoICPLoAddr
$0026		_intCont
$0028		_lcd_light_status
$0029		main_adc_volt1_L0
$002D		main_adc_volt2_L0
$0031		main_i_L0
$0033		
$0037		FARG_Adc_Read+0
$0037		FARG_Display_Tensione+0
$0037		FARG_lcd_set_light+0
$0037		FARG_Usart_Init+0
$0039		FARG_Display_Tensione+2
$003B		Display_Tensione_tensione1_L0
$003B		Usart_Init_tmp_L0
$003F		Display_Tensione_tensione2_L0
$0043		Display_Tensione_ch_L0
$0044		FARG_Lcd_Chr+0
$0044		FARG_Lcd_Init+0
$0044		FARG_rom_str2lcd+0
$0044		FARG_Usart_Write+0
$0045		FARG_Lcd_Chr+1
$0045		FARG_rom_str2lcd+1
$0046		FARG_Lcd_Chr+2
$0046		FARG_rom_str2lcd+2
$0048		rom_str2lcd_i_L0
$0049		rom_str2lcd_txt_msg_L0
$0059		FARG_LCD_Out+0
$005A		FARG_LCD_Out+1
$005B		FARG_LCD_Out+2
$005C		LCD_Out_i_L0
$005D		FARG_Lcd_Chr_CP+0
$005E		FARG_Lcd_Cmd+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0098		TXSTA
$0099		SPBRG
$009E		ADRESL
$009F		ADCON1


